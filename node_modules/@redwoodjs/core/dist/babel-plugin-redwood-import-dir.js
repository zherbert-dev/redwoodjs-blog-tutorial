"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js/object/define-property");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.default = _default;

var _includes = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/instance/includes"));

var _path = _interopRequireDefault(require("path"));

var _glob = _interopRequireDefault(require("glob"));

/**
 * This babel plugin will search for import statements that include a star "*",
 * the source part of the statement is a glob, the files that are matched are imported,
 * and appended to an object.
 *
 * @example:
 * Given a directory "src/services" that contains "a.js" and "b.ts", will produce
 * the following results
 * ```
 * import services from 'src/services/*.{js,ts}'
 * console.log(services)
 * // services.a = require('src/services/a.js')
 * // services.b = require('src/services/b.ts')
 * ```
 *
 * @todo We **do not** support nested directories.
 * @todo Generate ambient declerations for TypeScript of imported files.
 */
function _default({
  types: t
}) {
  return {
    name: 'babel-plugin-redwood-import-dir',
    visitor: {
      ImportDeclaration(p, state) {
        var _context;

        // This code will only run when we find an import statement that includes a "*".
        if (!(0, _includes.default)(_context = p.node.source.value).call(_context, '*')) {
          return;
        }

        const nodes = []; // import <node.specifiers[0].local.name> from <node.source.value>
        // + let importName = {}

        const importName = p.node.specifiers[0].local.name;
        nodes.push(t.variableDeclaration('let', [t.variableDeclarator(t.identifier(importName), t.objectExpression([]))]));

        const cwd = _path.default.dirname(state.file.opts.filename);

        const dirFiles = _glob.default.sync(p.node.source.value, {
          cwd
        });

        for (const filePath of dirFiles) {
          const fileName = _path.default.basename(filePath).split('.')[0]; // + import * as <importName>_<fileName> from <filePath>


          nodes.push(t.importDeclaration([t.importNamespaceSpecifier(t.identifier(importName + '_' + fileName))], t.stringLiteral(filePath))); // + <importName>.<fileName> = <importName_fileName>

          nodes.push(t.expressionStatement(t.assignmentExpression('=', t.memberExpression(t.identifier(importName), t.identifier(fileName)), t.identifier(importName + '_' + fileName))));
        }

        for (const node of nodes) {
          p.insertBefore(node);
        } // - import importName from "dirPath"


        p.remove();
      }

    }
  };
}
"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js/object/define-property");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.default = _default;

var _includes = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/instance/includes"));

var _filter = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/instance/filter"));

var _map = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/instance/map"));

var _internal = require("@redwoodjs/internal");

function _default({
  types: t
}) {
  let pages = (0, _internal.processPagesDir)();
  return {
    name: 'babel-plugin-redwood-routes-auto-loader',
    visitor: {
      // Remove any pages that have been explicitly imported in the Routes file,
      // because when one is present, the user is requesting that the module be
      // included in the main bundle.
      ImportDeclaration(p) {
        var _context;

        if (pages.length === 0) {
          return;
        }

        const declaredImports = (0, _map.default)(_context = p.node.specifiers).call(_context, specifier => specifier.local.name);
        pages = (0, _filter.default)(pages).call(pages, dep => !(0, _includes.default)(declaredImports).call(declaredImports, dep.const));
      },

      Program: {
        enter() {
          pages = (0, _internal.processPagesDir)();
        },

        exit(p) {
          if (pages.length === 0) {
            return;
          }

          const nodes = []; // Prepend all imports to the top of the file

          for (const {
            importName,
            importPath
          } of pages) {
            // + const <importName> = { name: <importName>, loader: () => import(<importPath>) }
            nodes.push(t.variableDeclaration('const', [t.variableDeclarator(t.identifier(importName), t.objectExpression([t.objectProperty(t.identifier('name'), t.stringLiteral(importName)), t.objectProperty(t.identifier('loader'), t.arrowFunctionExpression([], t.callExpression(t.identifier('import'), [t.stringLiteral(importPath)])))]))]));
          } // Insert at the top of the file


          p.node.body.unshift(...nodes);
        }

      }
    }
  };
}
"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js/object/define-property");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.createAuthClient = void 0;

var _promise = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/promise"));

var _regenerator = _interopRequireDefault(require("@babel/runtime-corejs3/regenerator"));

var _includes = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/instance/includes"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/asyncToGenerator"));

// TODO: Can also return an Auth0 user which doesn't have a definition.
// eslint-disable-next-line @typescript-eslint/no-empty-interface
var mapAuthClientAuth0 = function mapAuthClientAuth0(client) {
  return {
    type: 'auth0',
    client: client,
    restoreAuthState: function () {
      var _restoreAuthState = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee() {
        var _context;

        var _yield$client$handleR, appState;

        return _regenerator.default.wrap(function _callee$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                if (!(0, _includes.default)(_context = window.location.search).call(_context, 'code=')) {
                  _context2.next = 6;
                  break;
                }

                _context2.next = 3;
                return client.handleRedirectCallback();

              case 3:
                _yield$client$handleR = _context2.sent;
                appState = _yield$client$handleR.appState;
                window.history.replaceState({}, document.title, appState && appState.targetUrl ? appState.targetUrl : window.location.pathname);

              case 6:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee);
      }));

      function restoreAuthState() {
        return _restoreAuthState.apply(this, arguments);
      }

      return restoreAuthState;
    }(),
    login: function () {
      var _login = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2() {
        return _regenerator.default.wrap(function _callee2$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                return _context3.abrupt("return", client.loginWithRedirect());

              case 1:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee2);
      }));

      function login() {
        return _login.apply(this, arguments);
      }

      return login;
    }(),
    logout: function logout() {
      return client.logout();
    },
    getToken: function () {
      var _getToken = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee3() {
        return _regenerator.default.wrap(function _callee3$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                return _context4.abrupt("return", client.getTokenSilently());

              case 1:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee3);
      }));

      function getToken() {
        return _getToken.apply(this, arguments);
      }

      return getToken;
    }(),
    currentUser: function () {
      var _currentUser = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee4() {
        var user;
        return _regenerator.default.wrap(function _callee4$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                _context5.next = 2;
                return client.getUser();

              case 2:
                user = _context5.sent;
                return _context5.abrupt("return", user || null);

              case 4:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee4);
      }));

      function currentUser() {
        return _currentUser.apply(this, arguments);
      }

      return currentUser;
    }()
  };
};

var mapAuthClientGoTrue = function mapAuthClientGoTrue(client) {
  return {
    type: 'gotrue',
    client: client,
    login: function () {
      var _login2 = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee5(_ref) {
        var email, password, remember;
        return _regenerator.default.wrap(function _callee5$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                email = _ref.email, password = _ref.password, remember = _ref.remember;
                return _context6.abrupt("return", client.login(email, password, remember));

              case 2:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee5);
      }));

      function login(_x) {
        return _login2.apply(this, arguments);
      }

      return login;
    }(),
    logout: function () {
      var _logout = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee6() {
        var user;
        return _regenerator.default.wrap(function _callee6$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                _context7.next = 2;
                return client.currentUser();

              case 2:
                user = _context7.sent;
                return _context7.abrupt("return", user === null || user === void 0 ? void 0 : user.logout());

              case 4:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee6);
      }));

      function logout() {
        return _logout.apply(this, arguments);
      }

      return logout;
    }(),
    getToken: function () {
      var _getToken2 = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee7() {
        var user;
        return _regenerator.default.wrap(function _callee7$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                _context8.next = 2;
                return client.currentUser();

              case 2:
                user = _context8.sent;
                return _context8.abrupt("return", (user === null || user === void 0 ? void 0 : user.jwt()) || null);

              case 4:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee7);
      }));

      function getToken() {
        return _getToken2.apply(this, arguments);
      }

      return getToken;
    }(),
    currentUser: function () {
      var _currentUser2 = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee8() {
        return _regenerator.default.wrap(function _callee8$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                return _context9.abrupt("return", client.currentUser());

              case 1:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee8);
      }));

      function currentUser() {
        return _currentUser2.apply(this, arguments);
      }

      return currentUser;
    }()
  };
};

var mapAuthClientNetlify = function mapAuthClientNetlify(client) {
  return {
    type: 'netlify',
    client: client,
    login: function login() {
      return new _promise.default(function (resolve, reject) {
        var autoClosedModal = false;
        client.open('login');
        client.on('login', function (user) {
          // This closes the modal which pops-up immediately after you login.
          autoClosedModal = true;
          client.close();
          return resolve(user);
        });
        client.on('close', function () {
          !autoClosedModal && resolve(null);
        });
        client.on('error', reject);
      });
    },
    logout: function logout() {
      return new _promise.default(function (resolve, reject) {
        client.logout();
        client.on('logout', resolve);
        client.on('error', reject);
      });
    },
    getToken: function () {
      var _getToken3 = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee9() {
        var _user$token;

        var user;
        return _regenerator.default.wrap(function _callee9$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                _context10.next = 2;
                return client.currentUser();

              case 2:
                user = _context10.sent;
                return _context10.abrupt("return", (user === null || user === void 0 ? void 0 : (_user$token = user.token) === null || _user$token === void 0 ? void 0 : _user$token.access_token) || null);

              case 4:
              case "end":
                return _context10.stop();
            }
          }
        }, _callee9);
      }));

      function getToken() {
        return _getToken3.apply(this, arguments);
      }

      return getToken;
    }(),
    currentUser: function () {
      var _currentUser3 = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee10() {
        return _regenerator.default.wrap(function _callee10$(_context11) {
          while (1) {
            switch (_context11.prev = _context11.next) {
              case 0:
                return _context11.abrupt("return", client.currentUser());

              case 1:
              case "end":
                return _context11.stop();
            }
          }
        }, _callee10);
      }));

      function currentUser() {
        return _currentUser3.apply(this, arguments);
      }

      return currentUser;
    }()
  };
};

var mapAuthClientMagicLinks = function mapAuthClientMagicLinks(client) {
  return {
    type: 'magic.link',
    client: client,
    login: function () {
      var _login3 = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee11(_ref2) {
        var email, showUI;
        return _regenerator.default.wrap(function _callee11$(_context12) {
          while (1) {
            switch (_context12.prev = _context12.next) {
              case 0:
                email = _ref2.email, showUI = _ref2.showUI;
                _context12.next = 3;
                return client.auth.loginWithMagicLink({
                  email: email,
                  showUI: showUI
                });

              case 3:
                return _context12.abrupt("return", _context12.sent);

              case 4:
              case "end":
                return _context12.stop();
            }
          }
        }, _callee11);
      }));

      function login(_x2) {
        return _login3.apply(this, arguments);
      }

      return login;
    }(),
    logout: function () {
      var _logout2 = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee12() {
        return _regenerator.default.wrap(function _callee12$(_context13) {
          while (1) {
            switch (_context13.prev = _context13.next) {
              case 0:
                _context13.next = 2;
                return client.user.logout();

              case 2:
              case "end":
                return _context13.stop();
            }
          }
        }, _callee12);
      }));

      function logout() {
        return _logout2.apply(this, arguments);
      }

      return logout;
    }(),
    getToken: function () {
      var _getToken4 = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee13() {
        return _regenerator.default.wrap(function _callee13$(_context14) {
          while (1) {
            switch (_context14.prev = _context14.next) {
              case 0:
                _context14.next = 2;
                return client.user.getIdToken();

              case 2:
                return _context14.abrupt("return", _context14.sent);

              case 3:
              case "end":
                return _context14.stop();
            }
          }
        }, _callee13);
      }));

      function getToken() {
        return _getToken4.apply(this, arguments);
      }

      return getToken;
    }(),
    currentUser: function () {
      var _currentUser4 = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee14() {
        return _regenerator.default.wrap(function _callee14$(_context15) {
          while (1) {
            switch (_context15.prev = _context15.next) {
              case 0:
                _context15.next = 2;
                return client.user.isLoggedIn();

              case 2:
                if (!_context15.sent) {
                  _context15.next = 8;
                  break;
                }

                _context15.next = 5;
                return client.user.getMetadata();

              case 5:
                _context15.t0 = _context15.sent;
                _context15.next = 9;
                break;

              case 8:
                _context15.t0 = null;

              case 9:
                return _context15.abrupt("return", _context15.t0);

              case 10:
              case "end":
                return _context15.stop();
            }
          }
        }, _callee14);
      }));

      function currentUser() {
        return _currentUser4.apply(this, arguments);
      }

      return currentUser;
    }()
  };
};

var createAuthClient = function createAuthClient(client, type) {
  switch (type) {
    case 'auth0':
      return mapAuthClientAuth0(client);

    case 'gotrue':
      return mapAuthClientGoTrue(client);

    case 'netlify':
      return mapAuthClientNetlify(client);

    case 'magic.link':
      return mapAuthClientMagicLinks(client);

    default:
      throw new Error("The ".concat(type, " auth client is not currently supported, please consider adding it."));
  }
};

exports.createAuthClient = createAuthClient;
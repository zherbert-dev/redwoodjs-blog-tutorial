import React from 'react';
import type { SupportedAuthTypes, SupportedAuthClients, Auth0User, GoTrueUser, AuthClient, MagicUser } from './authClient';
export interface AuthContextInterface {
    loading: boolean;
    isAuthenticated: boolean;
    currentUser: null | GoTrueUser | Auth0User | MagicUser;
    logIn(): Promise<void>;
    logOut(): Promise<void>;
    getToken(): Promise<null | string>;
    client: null | SupportedAuthClients;
    type: null | SupportedAuthTypes;
}
export declare const AuthContext: React.Context<Partial<AuthContextInterface>>;
declare type AuthProviderProps = {
    client: AuthClient;
    type: SupportedAuthTypes;
};
declare type AuthProviderState = {
    loading: boolean;
    isAuthenticated: boolean;
    currentUser: null | Auth0User | GoTrueUser;
};
/**
 * @example
 * ```js
 *  const client = new Auth0Client(options)
 *  // ...
 *  <AuthProvider client={client} type="auth0">
 *    {children}
 *  </AuthProvider>
 * ```
 */
export declare class AuthProvider extends React.Component<AuthProviderProps, AuthProviderState> {
    state: AuthProviderState;
    rwClient: SupportedAuthClients;
    constructor(props: any);
    componentDidMount(): Promise<void>;
    logIn: (options?: any) => Promise<void>;
    logOut: () => Promise<void>;
    render(): JSX.Element;
}
export {};
//# sourceMappingURL=AuthProvider.d.ts.map
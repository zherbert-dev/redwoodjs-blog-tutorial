import type { default as GoTrue, User as GoTrueUser } from 'gotrue-js';
import type { Auth0Client as Auth0 } from '@auth0/auth0-spa-js';
import type NetlifyIdentityNS from 'netlify-identity-widget';
import type { Magic, MagicUserMetadata } from 'magic-sdk';
export interface Auth0User {
}
export type { GoTrueUser };
export declare type NetlifyIdentity = typeof NetlifyIdentityNS;
export declare type MagicLinks = Magic;
export declare type MagicUser = MagicUserMetadata;
export declare type SupportedAuthClients = Auth0 | GoTrue | NetlifyIdentity | MagicLinks;
export declare type SupportedAuthTypes = 'auth0' | 'gotrue' | 'netlify' | 'magic.link';
export interface AuthClient {
    restoreAuthState?(): void | Promise<any>;
    login(options?: any): Promise<any>;
    logout(): void | Promise<void>;
    getToken(): Promise<null | string>;
    currentUser(): Promise<null | Auth0User | GoTrueUser | MagicUser>;
    client: SupportedAuthClients;
    type: SupportedAuthTypes;
}
export declare type AuthClientAuth0 = AuthClient;
export interface AuthClientGoTrue extends AuthClient {
    login(options: {
        email: string;
        password: string;
        remember?: boolean;
    }): Promise<GoTrueUser>;
    client: GoTrue;
}
export interface MagicLinksClient extends AuthClient {
    login(options: {
        email: string;
        showUI?: boolean;
    }): any;
}
export declare const createAuthClient: (client: any, type: SupportedAuthTypes) => AuthClient;
//# sourceMappingURL=authClient.d.ts.map
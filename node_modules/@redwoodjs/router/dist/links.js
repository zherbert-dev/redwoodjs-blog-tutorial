"use strict";

var _interopRequireWildcard = require("@babel/runtime-corejs3/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js/object/define-property");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.Redirect = exports.useMatch = exports.NavLink = exports.Link = void 0;

var _filter = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/instance/filter"));

var _extends2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/objectWithoutProperties"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _internal = require("./internal");

/**
 * Returns true if the URL for the given "route" value matches the current URL.
 * This is useful for components that need to know "active" state, e.g.
 * <NavLink>.
 */
var useMatch = function useMatch(route) {
  var location = (0, _react.useContext)(_internal.LocationContext);
  var matchInfo = (0, _internal.matchPath)(route, location.pathname);
  return matchInfo;
};

exports.useMatch = useMatch;
var Link = (0, _react.forwardRef)(function (_ref, ref) {
  var to = _ref.to,
      rest = (0, _objectWithoutProperties2.default)(_ref, ["to"]);
  return /*#__PURE__*/_react.default.createElement("a", (0, _extends2.default)({
    href: to,
    ref: ref
  }, rest, {
    onClick: function onClick(event) {
      event.preventDefault();
      (0, _internal.navigate)(to);
    }
  }));
});
exports.Link = Link;
var NavLink = (0, _react.forwardRef)(function (_ref2, ref) {
  var _context;

  var to = _ref2.to,
      className = _ref2.className,
      activeClassName = _ref2.activeClassName,
      rest = (0, _objectWithoutProperties2.default)(_ref2, ["to", "className", "activeClassName"]);
  var matchInfo = useMatch(to);
  var theClassName = (0, _filter.default)(_context = [className, matchInfo.match && activeClassName]).call(_context, Boolean).join(' ');
  return /*#__PURE__*/_react.default.createElement("a", (0, _extends2.default)({
    href: to,
    ref: ref,
    className: theClassName
  }, rest, {
    onClick: function onClick(event) {
      event.preventDefault();
      (0, _internal.navigate)(to);
    }
  }));
});
/**
 * A declarative way to redirect to a route name
 */

exports.NavLink = NavLink;

var Redirect = function Redirect(_ref3) {
  var to = _ref3.to;
  (0, _react.useEffect)(function () {
    (0, _internal.navigate)(to);
  }, [to]);
  return null;
};

exports.Redirect = Redirect;
Redirect.propTypes = {
  /** The name of the route to redirect to */
  to: _propTypes.default.string.isRequired
};
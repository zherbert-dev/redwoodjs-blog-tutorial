"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js/object/define-property");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.mapNamedRoutes = exports.routes = void 0;

var _getIterator2 = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/get-iterator"));

var _isArray = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/array/is-array"));

var _getIteratorMethod2 = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/get-iterator-method"));

var _symbol = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/symbol"));

var _from = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/array/from"));

var _slice = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/instance/slice"));

var _internal = require("./internal");

function _createForOfIteratorHelper(o) { if (typeof _symbol.default === "undefined" || (0, _getIteratorMethod2.default)(o) == null) { if ((0, _isArray.default)(o) || (o = _unsupportedIterableToArray(o))) { var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var it, normalCompletion = true, didErr = false, err; return { s: function s() { it = (0, _getIterator2.default)(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { var _context; if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = (0, _slice.default)(_context = Object.prototype.toString.call(o)).call(_context, 8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return (0, _from.default)(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

// The first time the routes are loaded, iterate through them and create the named
// route functions.
var namedRoutes = {};
var namedRoutesDone = false;

var mapNamedRoutes = function mapNamedRoutes(routes) {
  if (namedRoutesDone) {
    return namedRoutes;
  }

  var _iterator = _createForOfIteratorHelper(routes),
      _step;

  try {
    var _loop = function _loop() {
      var route = _step.value;
      var _route$props = route.props,
          path = _route$props.path,
          name = _route$props.name,
          notfound = _route$props.notfound; // Skip the notfound route.

      if (notfound) {
        return "continue";
      } // Check for issues with the path.


      (0, _internal.validatePath)(path); // Create the named route function for this route.

      namedRoutes[name] = function () {
        var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        return (0, _internal.replaceParams)(path, args);
      };
    };

    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var _ret = _loop();

      if (_ret === "continue") continue;
    } // Only need to do this once.

  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  namedRoutesDone = true;
  return namedRoutes;
};

exports.mapNamedRoutes = mapNamedRoutes;
var routes = namedRoutes;
exports.routes = routes;
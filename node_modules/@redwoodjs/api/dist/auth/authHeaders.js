"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js/object/define-property");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.decodeAuthToken = exports.getAuthProviderType = void 0;

var _jsonwebtoken = _interopRequireDefault(require("jsonwebtoken"));

var _apolloServerLambda = require("apollo-server-lambda");

var _verifyAuth0Token = require("./verifyAuth0Token");

//
// This is shared by `@redwoodjs/web`
const AUTH_PROVIDER_HEADER = 'auth-provider';

const getAuthProviderType = event => {
  return event === null || event === void 0 ? void 0 : event.headers[AUTH_PROVIDER_HEADER];
};

exports.getAuthProviderType = getAuthProviderType;

/**
 * Redwood supports multiple authentication providers. We add headers to the client
 * requests when a user is authenticated
 * - `Auth-Provider`: Denotes the authentication provider.
 * - `Authorization`: A JWT or SWT token.
 *
 * This function decodes the Authorization token.
 *
 * @returns `null` when the auth token couldn't be decoded or wasn't available.
 * @returns `object` or `string` otherwise.
 */
const decodeAuthToken = async ({
  type,
  event,
  context
}) => {
  var _event$headers, _event$headers$author, _event$headers$author2;

  const token = (_event$headers = event.headers) === null || _event$headers === void 0 ? void 0 : (_event$headers$author = _event$headers.authorization) === null || _event$headers$author === void 0 ? void 0 : (_event$headers$author2 = _event$headers$author.split(' ')) === null || _event$headers$author2 === void 0 ? void 0 : _event$headers$author2[1];

  if (!token && token.length === 0) {
    throw new Error('Empty authorization token');
  }

  let decoded = null;

  switch (type) {
    case 'gotrue':
    case 'netlify':
      {
        // Netlify verifies and decodes a JWT before the request hits the lambda
        // function handler so the decoded jwt is already available.
        if (process.env.NODE_ENV === 'production') {
          const clientContext = context.clientContext;
          decoded = (clientContext === null || clientContext === void 0 ? void 0 : clientContext.user) || null;
        } else {
          // We emualate the native Netlify experience in development mode.
          // We decode it since we don't have the signing key.
          decoded = _jsonwebtoken.default.decode(token);
        }

        break;
      }

    case 'auth0':
      {
        decoded = await (0, _verifyAuth0Token.verifyAuth0Token)(token);
        break;
      }
    // The tokens here include a custom library for decoding. The user receives a "raw token" which they have to decode themselves.

    case 'magic.link':
      {
        decoded = token;
        break;
      }

    default:
      throw new Error(`Auth-Provider of type "${type}" is not supported.`);
  }

  if (decoded === null) {
    throw new _apolloServerLambda.AuthenticationError('The authentication token could not be decoded.');
  }

  return decoded;
};

exports.decodeAuthToken = decodeAuthToken;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9hdXRoL2F1dGhIZWFkZXJzLnRzIl0sIm5hbWVzIjpbIkFVVEhfUFJPVklERVJfSEVBREVSIiwiZ2V0QXV0aFByb3ZpZGVyVHlwZSIsImV2ZW50IiwiaGVhZGVycyIsImRlY29kZUF1dGhUb2tlbiIsInR5cGUiLCJjb250ZXh0IiwidG9rZW4iLCJhdXRob3JpemF0aW9uIiwic3BsaXQiLCJsZW5ndGgiLCJFcnJvciIsImRlY29kZWQiLCJwcm9jZXNzIiwiZW52IiwiTk9ERV9FTlYiLCJjbGllbnRDb250ZXh0IiwidXNlciIsImp3dCIsImRlY29kZSIsIkF1dGhlbnRpY2F0aW9uRXJyb3IiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQU1BOztBQUNBOztBQUVBOztBQUpBO0FBUUE7QUFDQSxNQUFNQSxvQkFBb0IsR0FBRyxlQUE3Qjs7QUFFTyxNQUFNQyxtQkFBbUIsR0FDOUJDLEtBRGlDLElBRVY7QUFDdkIsU0FBT0EsS0FBUCxhQUFPQSxLQUFQLHVCQUFPQSxLQUFLLENBQUVDLE9BQVAsQ0FBZUgsb0JBQWYsQ0FBUDtBQUNELENBSk07Ozs7QUFZUDs7Ozs7Ozs7Ozs7QUFXTyxNQUFNSSxlQUFlLEdBQUcsT0FBTztBQUNwQ0MsRUFBQUEsSUFEb0M7QUFFcENILEVBQUFBLEtBRm9DO0FBR3BDSSxFQUFBQTtBQUhvQyxDQUFQLEtBUUQ7QUFBQTs7QUFDNUIsUUFBTUMsS0FBSyxxQkFBR0wsS0FBSyxDQUFDQyxPQUFULDRFQUFHLGVBQWVLLGFBQWxCLG9GQUFHLHNCQUE4QkMsS0FBOUIsQ0FBb0MsR0FBcEMsQ0FBSCwyREFBRyx1QkFBMkMsQ0FBM0MsQ0FBZDs7QUFDQSxNQUFJLENBQUNGLEtBQUQsSUFBVUEsS0FBSyxDQUFDRyxNQUFOLEtBQWlCLENBQS9CLEVBQWtDO0FBQ2hDLFVBQU0sSUFBSUMsS0FBSixDQUFVLDJCQUFWLENBQU47QUFDRDs7QUFFRCxNQUFJQyxPQUFzQixHQUFHLElBQTdCOztBQUNBLFVBQVFQLElBQVI7QUFDRSxTQUFLLFFBQUw7QUFDQSxTQUFLLFNBQUw7QUFBZ0I7QUFDZDtBQUNBO0FBQ0EsWUFBSVEsT0FBTyxDQUFDQyxHQUFSLENBQVlDLFFBQVosS0FBeUIsWUFBN0IsRUFBMkM7QUFDekMsZ0JBQU1DLGFBQWEsR0FBR1YsT0FBTyxDQUFDVSxhQUE5QjtBQUNBSixVQUFBQSxPQUFPLEdBQUcsQ0FBQUksYUFBYSxTQUFiLElBQUFBLGFBQWEsV0FBYixZQUFBQSxhQUFhLENBQUVDLElBQWYsS0FBdUIsSUFBakM7QUFDRCxTQUhELE1BR087QUFDTDtBQUNBO0FBQ0FMLFVBQUFBLE9BQU8sR0FBR00sc0JBQUlDLE1BQUosQ0FBV1osS0FBWCxDQUFWO0FBQ0Q7O0FBQ0Q7QUFDRDs7QUFDRCxTQUFLLE9BQUw7QUFBYztBQUNaSyxRQUFBQSxPQUFPLEdBQUcsTUFBTSx3Q0FBaUJMLEtBQWpCLENBQWhCO0FBQ0E7QUFDRDtBQUNEOztBQUNBLFNBQUssWUFBTDtBQUFtQjtBQUNqQkssUUFBQUEsT0FBTyxHQUFHTCxLQUFWO0FBQ0E7QUFDRDs7QUFDRDtBQUNFLFlBQU0sSUFBSUksS0FBSixDQUFXLDBCQUF5Qk4sSUFBSyxxQkFBekMsQ0FBTjtBQXpCSjs7QUE0QkEsTUFBSU8sT0FBTyxLQUFLLElBQWhCLEVBQXNCO0FBQ3BCLFVBQU0sSUFBSVEsdUNBQUosQ0FDSixnREFESSxDQUFOO0FBR0Q7O0FBRUQsU0FBT1IsT0FBUDtBQUNELENBbERNIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUge1xuICBBUElHYXRld2F5UHJveHlFdmVudCxcbiAgQ29udGV4dCBhcyBMYW1iZGFDb250ZXh0LFxuICBDbGllbnRDb250ZXh0LFxufSBmcm9tICdhd3MtbGFtYmRhJ1xuLy9cbmltcG9ydCBqd3QgZnJvbSAnanNvbndlYnRva2VuJ1xuaW1wb3J0IHsgQXV0aGVudGljYXRpb25FcnJvciB9IGZyb20gJ2Fwb2xsby1zZXJ2ZXItbGFtYmRhJ1xuXG5pbXBvcnQgeyB2ZXJpZnlBdXRoMFRva2VuIH0gZnJvbSAnLi92ZXJpZnlBdXRoMFRva2VuJ1xuXG5leHBvcnQgdHlwZSBTdXBwb3J0ZWRBdXRoVHlwZXMgPSAnYXV0aDAnIHwgJ25ldGxpZnknIHwgJ2dvdHJ1ZScgfCAnbWFnaWMubGluaydcblxuLy8gVGhpcyBpcyBzaGFyZWQgYnkgYEByZWR3b29kanMvd2ViYFxuY29uc3QgQVVUSF9QUk9WSURFUl9IRUFERVIgPSAnYXV0aC1wcm92aWRlcidcblxuZXhwb3J0IGNvbnN0IGdldEF1dGhQcm92aWRlclR5cGUgPSAoXG4gIGV2ZW50OiBBUElHYXRld2F5UHJveHlFdmVudFxuKTogU3VwcG9ydGVkQXV0aFR5cGVzID0+IHtcbiAgcmV0dXJuIGV2ZW50Py5oZWFkZXJzW0FVVEhfUFJPVklERVJfSEVBREVSXSBhcyBTdXBwb3J0ZWRBdXRoVHlwZXNcbn1cblxudHlwZSBOZXdDbGllbnRDb250ZXh0ID0gQ2xpZW50Q29udGV4dCAmIHtcbiAgdXNlcj86IG9iamVjdFxufVxuXG5leHBvcnQgdHlwZSBBdXRoVG9rZW5UeXBlID0gbnVsbCB8IG9iamVjdCB8IHN0cmluZ1xuXG4vKipcbiAqIFJlZHdvb2Qgc3VwcG9ydHMgbXVsdGlwbGUgYXV0aGVudGljYXRpb24gcHJvdmlkZXJzLiBXZSBhZGQgaGVhZGVycyB0byB0aGUgY2xpZW50XG4gKiByZXF1ZXN0cyB3aGVuIGEgdXNlciBpcyBhdXRoZW50aWNhdGVkXG4gKiAtIGBBdXRoLVByb3ZpZGVyYDogRGVub3RlcyB0aGUgYXV0aGVudGljYXRpb24gcHJvdmlkZXIuXG4gKiAtIGBBdXRob3JpemF0aW9uYDogQSBKV1Qgb3IgU1dUIHRva2VuLlxuICpcbiAqIFRoaXMgZnVuY3Rpb24gZGVjb2RlcyB0aGUgQXV0aG9yaXphdGlvbiB0b2tlbi5cbiAqXG4gKiBAcmV0dXJucyBgbnVsbGAgd2hlbiB0aGUgYXV0aCB0b2tlbiBjb3VsZG4ndCBiZSBkZWNvZGVkIG9yIHdhc24ndCBhdmFpbGFibGUuXG4gKiBAcmV0dXJucyBgb2JqZWN0YCBvciBgc3RyaW5nYCBvdGhlcndpc2UuXG4gKi9cbmV4cG9ydCBjb25zdCBkZWNvZGVBdXRoVG9rZW4gPSBhc3luYyAoe1xuICB0eXBlLFxuICBldmVudCxcbiAgY29udGV4dCxcbn06IHtcbiAgdHlwZTogU3VwcG9ydGVkQXV0aFR5cGVzXG4gIGV2ZW50OiBBUElHYXRld2F5UHJveHlFdmVudFxuICBjb250ZXh0OiBMYW1iZGFDb250ZXh0XG59KTogUHJvbWlzZTxBdXRoVG9rZW5UeXBlPiA9PiB7XG4gIGNvbnN0IHRva2VuID0gZXZlbnQuaGVhZGVycz8uYXV0aG9yaXphdGlvbj8uc3BsaXQoJyAnKT8uWzFdXG4gIGlmICghdG9rZW4gJiYgdG9rZW4ubGVuZ3RoID09PSAwKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdFbXB0eSBhdXRob3JpemF0aW9uIHRva2VuJylcbiAgfVxuXG4gIGxldCBkZWNvZGVkOiBBdXRoVG9rZW5UeXBlID0gbnVsbFxuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlICdnb3RydWUnOlxuICAgIGNhc2UgJ25ldGxpZnknOiB7XG4gICAgICAvLyBOZXRsaWZ5IHZlcmlmaWVzIGFuZCBkZWNvZGVzIGEgSldUIGJlZm9yZSB0aGUgcmVxdWVzdCBoaXRzIHRoZSBsYW1iZGFcbiAgICAgIC8vIGZ1bmN0aW9uIGhhbmRsZXIgc28gdGhlIGRlY29kZWQgand0IGlzIGFscmVhZHkgYXZhaWxhYmxlLlxuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgY29uc3QgY2xpZW50Q29udGV4dCA9IGNvbnRleHQuY2xpZW50Q29udGV4dCBhcyBOZXdDbGllbnRDb250ZXh0XG4gICAgICAgIGRlY29kZWQgPSBjbGllbnRDb250ZXh0Py51c2VyIHx8IG51bGxcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIFdlIGVtdWFsYXRlIHRoZSBuYXRpdmUgTmV0bGlmeSBleHBlcmllbmNlIGluIGRldmVsb3BtZW50IG1vZGUuXG4gICAgICAgIC8vIFdlIGRlY29kZSBpdCBzaW5jZSB3ZSBkb24ndCBoYXZlIHRoZSBzaWduaW5nIGtleS5cbiAgICAgICAgZGVjb2RlZCA9IGp3dC5kZWNvZGUodG9rZW4pXG4gICAgICB9XG4gICAgICBicmVha1xuICAgIH1cbiAgICBjYXNlICdhdXRoMCc6IHtcbiAgICAgIGRlY29kZWQgPSBhd2FpdCB2ZXJpZnlBdXRoMFRva2VuKHRva2VuKVxuICAgICAgYnJlYWtcbiAgICB9XG4gICAgLy8gVGhlIHRva2VucyBoZXJlIGluY2x1ZGUgYSBjdXN0b20gbGlicmFyeSBmb3IgZGVjb2RpbmcuIFRoZSB1c2VyIHJlY2VpdmVzIGEgXCJyYXcgdG9rZW5cIiB3aGljaCB0aGV5IGhhdmUgdG8gZGVjb2RlIHRoZW1zZWx2ZXMuXG4gICAgY2FzZSAnbWFnaWMubGluayc6IHtcbiAgICAgIGRlY29kZWQgPSB0b2tlblxuICAgICAgYnJlYWtcbiAgICB9XG4gICAgZGVmYXVsdDpcbiAgICAgIHRocm93IG5ldyBFcnJvcihgQXV0aC1Qcm92aWRlciBvZiB0eXBlIFwiJHt0eXBlfVwiIGlzIG5vdCBzdXBwb3J0ZWQuYClcbiAgfVxuXG4gIGlmIChkZWNvZGVkID09PSBudWxsKSB7XG4gICAgdGhyb3cgbmV3IEF1dGhlbnRpY2F0aW9uRXJyb3IoXG4gICAgICAnVGhlIGF1dGhlbnRpY2F0aW9uIHRva2VuIGNvdWxkIG5vdCBiZSBkZWNvZGVkLidcbiAgICApXG4gIH1cblxuICByZXR1cm4gZGVjb2RlZFxufVxuIl19
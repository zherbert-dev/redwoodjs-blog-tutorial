"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js/object/define-property");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.verifyAuth0Token = void 0;

var _promise = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/promise"));

var _jsonwebtoken = _interopRequireDefault(require("jsonwebtoken"));

var _jwksRsa = _interopRequireDefault(require("jwks-rsa"));

// https://auth0.com/docs/api-auth/tutorials/verify-access-token

/**
 * This takes an auth0 jwt and verifies it. It returns something like this:
 * ```js
 * {
 *   iss: 'https://<AUTH0_DOMAIN>/',
 *   sub: 'auth0|xxx',
 *   aud: [ 'api.billable', 'https://<AUTH0_DOMAIN>/userinfo' ],
 *   iat: 1588800141,
 *   exp: 1588886541,
 *   azp: 'QOsYIlHvCLqLzmfDU0Z3upFdu1znlkqK',
 *   scope: 'openid profile email'
 * }
 * ```
 *
 * You can use `sub` as a stable reference to your user, buti f you want the email
 * addres you can set a context object[^0] in rules[^1]:
 *
 * ^0: https://auth0.com/docs/rules/references/context-object
 * ^1: https://manage.auth0.com/#/rules/new
 *
 */
const verifyAuth0Token = bearerToken => {
  return new _promise.default((resolve, reject) => {
    const {
      AUTH0_DOMAIN,
      AUTH0_AUDIENCE
    } = process.env;

    if (!AUTH0_DOMAIN || !AUTH0_AUDIENCE) {
      throw new Error('`AUTH0_DOMAIN` or `AUTH0_AUDIENCE` env vars are not set.');
    }

    const client = (0, _jwksRsa.default)({
      jwksUri: `https://${AUTH0_DOMAIN}/.well-known/jwks.json`
    });

    _jsonwebtoken.default.verify(bearerToken, (header, callback) => {
      client.getSigningKey(header.kid, (error, key) => {
        callback(error, key.getPublicKey());
      });
    }, {
      audience: AUTH0_AUDIENCE,
      issuer: `https://${AUTH0_DOMAIN}/`,
      algorithms: ['RS256']
    }, (verifyError, decoded) => {
      if (verifyError) {
        return reject(verifyError);
      }

      resolve(typeof decoded !== 'undefined' ? decoded : null);
    });
  });
};

exports.verifyAuth0Token = verifyAuth0Token;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9hdXRoL3ZlcmlmeUF1dGgwVG9rZW4udHMiXSwibmFtZXMiOlsidmVyaWZ5QXV0aDBUb2tlbiIsImJlYXJlclRva2VuIiwicmVzb2x2ZSIsInJlamVjdCIsIkFVVEgwX0RPTUFJTiIsIkFVVEgwX0FVRElFTkNFIiwicHJvY2VzcyIsImVudiIsIkVycm9yIiwiY2xpZW50Iiwiandrc1VyaSIsImp3dCIsInZlcmlmeSIsImhlYWRlciIsImNhbGxiYWNrIiwiZ2V0U2lnbmluZ0tleSIsImtpZCIsImVycm9yIiwia2V5IiwiZ2V0UHVibGljS2V5IiwiYXVkaWVuY2UiLCJpc3N1ZXIiLCJhbGdvcml0aG1zIiwidmVyaWZ5RXJyb3IiLCJkZWNvZGVkIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUVBOztBQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFxQk8sTUFBTUEsZ0JBQWdCLEdBQzNCQyxXQUQ4QixJQUVIO0FBQzNCLFNBQU8scUJBQVksQ0FBQ0MsT0FBRCxFQUFVQyxNQUFWLEtBQXFCO0FBQ3RDLFVBQU07QUFBRUMsTUFBQUEsWUFBRjtBQUFnQkMsTUFBQUE7QUFBaEIsUUFBbUNDLE9BQU8sQ0FBQ0MsR0FBakQ7O0FBQ0EsUUFBSSxDQUFDSCxZQUFELElBQWlCLENBQUNDLGNBQXRCLEVBQXNDO0FBQ3BDLFlBQU0sSUFBSUcsS0FBSixDQUNKLDBEQURJLENBQU47QUFHRDs7QUFFRCxVQUFNQyxNQUFNLEdBQUcsc0JBQVc7QUFDeEJDLE1BQUFBLE9BQU8sRUFBRyxXQUFVTixZQUFhO0FBRFQsS0FBWCxDQUFmOztBQUlBTywwQkFBSUMsTUFBSixDQUNFWCxXQURGLEVBRUUsQ0FBQ1ksTUFBRCxFQUFTQyxRQUFULEtBQXNCO0FBQ3BCTCxNQUFBQSxNQUFNLENBQUNNLGFBQVAsQ0FBcUJGLE1BQU0sQ0FBQ0csR0FBNUIsRUFBMkMsQ0FBQ0MsS0FBRCxFQUFRQyxHQUFSLEtBQWdCO0FBQ3pESixRQUFBQSxRQUFRLENBQUNHLEtBQUQsRUFBUUMsR0FBRyxDQUFDQyxZQUFKLEVBQVIsQ0FBUjtBQUNELE9BRkQ7QUFHRCxLQU5ILEVBT0U7QUFDRUMsTUFBQUEsUUFBUSxFQUFFZixjQURaO0FBRUVnQixNQUFBQSxNQUFNLEVBQUcsV0FBVWpCLFlBQWEsR0FGbEM7QUFHRWtCLE1BQUFBLFVBQVUsRUFBRSxDQUFDLE9BQUQ7QUFIZCxLQVBGLEVBWUUsQ0FBQ0MsV0FBRCxFQUFjQyxPQUFkLEtBQTBCO0FBQ3hCLFVBQUlELFdBQUosRUFBaUI7QUFDZixlQUFPcEIsTUFBTSxDQUFDb0IsV0FBRCxDQUFiO0FBQ0Q7O0FBQ0RyQixNQUFBQSxPQUFPLENBQUMsT0FBT3NCLE9BQVAsS0FBbUIsV0FBbkIsR0FBaUNBLE9BQWpDLEdBQTJDLElBQTVDLENBQVA7QUFDRCxLQWpCSDtBQW1CRCxHQS9CTSxDQUFQO0FBZ0NELENBbkNNIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGp3dCBmcm9tICdqc29ud2VidG9rZW4nXG5pbXBvcnQgandrc0NsaWVudCBmcm9tICdqd2tzLXJzYSdcblxuLy8gaHR0cHM6Ly9hdXRoMC5jb20vZG9jcy9hcGktYXV0aC90dXRvcmlhbHMvdmVyaWZ5LWFjY2Vzcy10b2tlblxuLyoqXG4gKiBUaGlzIHRha2VzIGFuIGF1dGgwIGp3dCBhbmQgdmVyaWZpZXMgaXQuIEl0IHJldHVybnMgc29tZXRoaW5nIGxpa2UgdGhpczpcbiAqIGBgYGpzXG4gKiB7XG4gKiAgIGlzczogJ2h0dHBzOi8vPEFVVEgwX0RPTUFJTj4vJyxcbiAqICAgc3ViOiAnYXV0aDB8eHh4JyxcbiAqICAgYXVkOiBbICdhcGkuYmlsbGFibGUnLCAnaHR0cHM6Ly88QVVUSDBfRE9NQUlOPi91c2VyaW5mbycgXSxcbiAqICAgaWF0OiAxNTg4ODAwMTQxLFxuICogICBleHA6IDE1ODg4ODY1NDEsXG4gKiAgIGF6cDogJ1FPc1lJbEh2Q0xxTHptZkRVMFozdXBGZHUxem5sa3FLJyxcbiAqICAgc2NvcGU6ICdvcGVuaWQgcHJvZmlsZSBlbWFpbCdcbiAqIH1cbiAqIGBgYFxuICpcbiAqIFlvdSBjYW4gdXNlIGBzdWJgIGFzIGEgc3RhYmxlIHJlZmVyZW5jZSB0byB5b3VyIHVzZXIsIGJ1dGkgZiB5b3Ugd2FudCB0aGUgZW1haWxcbiAqIGFkZHJlcyB5b3UgY2FuIHNldCBhIGNvbnRleHQgb2JqZWN0W14wXSBpbiBydWxlc1teMV06XG4gKlxuICogXjA6IGh0dHBzOi8vYXV0aDAuY29tL2RvY3MvcnVsZXMvcmVmZXJlbmNlcy9jb250ZXh0LW9iamVjdFxuICogXjE6IGh0dHBzOi8vbWFuYWdlLmF1dGgwLmNvbS8jL3J1bGVzL25ld1xuICpcbiAqL1xuZXhwb3J0IGNvbnN0IHZlcmlmeUF1dGgwVG9rZW4gPSAoXG4gIGJlYXJlclRva2VuOiBzdHJpbmdcbik6IFByb21pc2U8bnVsbCB8IG9iamVjdD4gPT4ge1xuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIGNvbnN0IHsgQVVUSDBfRE9NQUlOLCBBVVRIMF9BVURJRU5DRSB9ID0gcHJvY2Vzcy5lbnZcbiAgICBpZiAoIUFVVEgwX0RPTUFJTiB8fCAhQVVUSDBfQVVESUVOQ0UpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ2BBVVRIMF9ET01BSU5gIG9yIGBBVVRIMF9BVURJRU5DRWAgZW52IHZhcnMgYXJlIG5vdCBzZXQuJ1xuICAgICAgKVxuICAgIH1cblxuICAgIGNvbnN0IGNsaWVudCA9IGp3a3NDbGllbnQoe1xuICAgICAgandrc1VyaTogYGh0dHBzOi8vJHtBVVRIMF9ET01BSU59Ly53ZWxsLWtub3duL2p3a3MuanNvbmAsXG4gICAgfSlcblxuICAgIGp3dC52ZXJpZnkoXG4gICAgICBiZWFyZXJUb2tlbixcbiAgICAgIChoZWFkZXIsIGNhbGxiYWNrKSA9PiB7XG4gICAgICAgIGNsaWVudC5nZXRTaWduaW5nS2V5KGhlYWRlci5raWQgYXMgc3RyaW5nLCAoZXJyb3IsIGtleSkgPT4ge1xuICAgICAgICAgIGNhbGxiYWNrKGVycm9yLCBrZXkuZ2V0UHVibGljS2V5KCkpXG4gICAgICAgIH0pXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBhdWRpZW5jZTogQVVUSDBfQVVESUVOQ0UsXG4gICAgICAgIGlzc3VlcjogYGh0dHBzOi8vJHtBVVRIMF9ET01BSU59L2AsXG4gICAgICAgIGFsZ29yaXRobXM6IFsnUlMyNTYnXSxcbiAgICAgIH0sXG4gICAgICAodmVyaWZ5RXJyb3IsIGRlY29kZWQpID0+IHtcbiAgICAgICAgaWYgKHZlcmlmeUVycm9yKSB7XG4gICAgICAgICAgcmV0dXJuIHJlamVjdCh2ZXJpZnlFcnJvcilcbiAgICAgICAgfVxuICAgICAgICByZXNvbHZlKHR5cGVvZiBkZWNvZGVkICE9PSAndW5kZWZpbmVkJyA/IGRlY29kZWQgOiBudWxsKVxuICAgICAgfVxuICAgIClcbiAgfSlcbn1cbiJdfQ==
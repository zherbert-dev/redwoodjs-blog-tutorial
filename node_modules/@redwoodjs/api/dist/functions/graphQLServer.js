"use strict";

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js/object/define-property");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.createGraphQLHandler = exports.createContextHandler = void 0;

var _apolloServerLambda = require("apollo-server-lambda");

var _authHeaders = require("../auth/authHeaders");

var _globalContext = require("../globalContext");

//

/**
 * We use Apollo Server's `context` option as an entry point for constructing our own
 * global context object.
 *
 * Context explained Apollo's Docs:
 * Context is an object shared by all resolvers in a particular query,
 * and is used to contain per-request state, including authentication information,
 * dataloader instances, and anything else that should be taken into account when
 * resolving the query.
 */
const createContextHandler = (userContext, getCurrentUser) => {
  return async ({
    event,
    context
  }) => {
    // Prevent the Lambda function from waiting for all resources,
    // such as database connections, to be released before returning a reponse.
    context.callbackWaitsForEmptyEventLoop = false; // Get the authorization information from the request headers and request context.

    const type = (0, _authHeaders.getAuthProviderType)(event);

    if (typeof type !== 'undefined') {
      const authToken = await (0, _authHeaders.decodeAuthToken)({
        type,
        event,
        context
      });
      context.currentUser = typeof getCurrentUser == 'function' ? await getCurrentUser(authToken) : authToken;
    }

    if (typeof userContext === 'function') {
      userContext = await userContext({
        event,
        context
      });
    } // Sets the **global** context object, which can be imported with:
    // import { context } from '@redwoodjs/api'


    return (0, _globalContext.setContext)({ ...context,
      ...userContext
    });
  };
};

exports.createContextHandler = createContextHandler;

/**
 * Creates an Apollo GraphQL Server.
 *
 * ```js
 * export const handler = createGraphQLHandler({ schema, context, getCurrentUser })
 * ```
 */
const createGraphQLHandler = ({
  context,
  getCurrentUser,
  onException,
  ...options
} = {}, db) => {
  const handler = new _apolloServerLambda.ApolloServer({
    playground: process.env.NODE_ENV !== 'production',
    ...options,
    context: createContextHandler(context, getCurrentUser)
  }).createHandler();
  return (event, context, callback) => {
    try {
      handler(event, context, callback);
    } catch (e) {
      onException && onException(); // Disconnect from the database (recommended by Prisma), this step will be
      // removed in future releases.

      db && db.disconnect();
      throw e;
    }
  };
};

exports.createGraphQLHandler = createGraphQLHandler;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9mdW5jdGlvbnMvZ3JhcGhRTFNlcnZlci50cyJdLCJuYW1lcyI6WyJjcmVhdGVDb250ZXh0SGFuZGxlciIsInVzZXJDb250ZXh0IiwiZ2V0Q3VycmVudFVzZXIiLCJldmVudCIsImNvbnRleHQiLCJjYWxsYmFja1dhaXRzRm9yRW1wdHlFdmVudExvb3AiLCJ0eXBlIiwiYXV0aFRva2VuIiwiY3VycmVudFVzZXIiLCJjcmVhdGVHcmFwaFFMSGFuZGxlciIsIm9uRXhjZXB0aW9uIiwib3B0aW9ucyIsImRiIiwiaGFuZGxlciIsIkFwb2xsb1NlcnZlciIsInBsYXlncm91bmQiLCJwcm9jZXNzIiwiZW52IiwiTk9ERV9FTlYiLCJjcmVhdGVIYW5kbGVyIiwiY2FsbGJhY2siLCJlIiwiZGlzY29ubmVjdCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUtBOztBQUNBOztBQUNBOztBQUhBOztBQVNBOzs7Ozs7Ozs7O0FBVU8sTUFBTUEsb0JBQW9CLEdBQUcsQ0FDbENDLFdBRGtDLEVBRWxDQyxjQUZrQyxLQUcvQjtBQUNILFNBQU8sT0FBTztBQUNaQyxJQUFBQSxLQURZO0FBRVpDLElBQUFBO0FBRlksR0FBUCxLQU1EO0FBQ0o7QUFDQTtBQUNBQSxJQUFBQSxPQUFPLENBQUNDLDhCQUFSLEdBQXlDLEtBQXpDLENBSEksQ0FLSjs7QUFDQSxVQUFNQyxJQUFJLEdBQUcsc0NBQW9CSCxLQUFwQixDQUFiOztBQUNBLFFBQUksT0FBT0csSUFBUCxLQUFnQixXQUFwQixFQUFpQztBQUMvQixZQUFNQyxTQUFTLEdBQUcsTUFBTSxrQ0FBZ0I7QUFBRUQsUUFBQUEsSUFBRjtBQUFRSCxRQUFBQSxLQUFSO0FBQWVDLFFBQUFBO0FBQWYsT0FBaEIsQ0FBeEI7QUFDQUEsTUFBQUEsT0FBTyxDQUFDSSxXQUFSLEdBQ0UsT0FBT04sY0FBUCxJQUF5QixVQUF6QixHQUNJLE1BQU1BLGNBQWMsQ0FBQ0ssU0FBRCxDQUR4QixHQUVJQSxTQUhOO0FBSUQ7O0FBRUQsUUFBSSxPQUFPTixXQUFQLEtBQXVCLFVBQTNCLEVBQXVDO0FBQ3JDQSxNQUFBQSxXQUFXLEdBQUcsTUFBTUEsV0FBVyxDQUFDO0FBQUVFLFFBQUFBLEtBQUY7QUFBU0MsUUFBQUE7QUFBVCxPQUFELENBQS9CO0FBQ0QsS0FqQkcsQ0FtQko7QUFDQTs7O0FBQ0EsV0FBTywrQkFBVyxFQUNoQixHQUFHQSxPQURhO0FBRWhCLFNBQUdIO0FBRmEsS0FBWCxDQUFQO0FBSUQsR0EvQkQ7QUFnQ0QsQ0FwQ007Ozs7QUFzRFA7Ozs7Ozs7QUFPTyxNQUFNUSxvQkFBb0IsR0FBRyxDQUNsQztBQUNFTCxFQUFBQSxPQURGO0FBRUVGLEVBQUFBLGNBRkY7QUFHRVEsRUFBQUEsV0FIRjtBQUlFLEtBQUdDO0FBSkwsSUFLMkIsRUFOTyxFQVVsQ0MsRUFWa0MsS0FXL0I7QUFDSCxRQUFNQyxPQUFPLEdBQUcsSUFBSUMsZ0NBQUosQ0FBaUI7QUFDL0JDLElBQUFBLFVBQVUsRUFBRUMsT0FBTyxDQUFDQyxHQUFSLENBQVlDLFFBQVosS0FBeUIsWUFETjtBQUUvQixPQUFHUCxPQUY0QjtBQUcvQlAsSUFBQUEsT0FBTyxFQUFFSixvQkFBb0IsQ0FBQ0ksT0FBRCxFQUFVRixjQUFWO0FBSEUsR0FBakIsRUFJYmlCLGFBSmEsRUFBaEI7QUFNQSxTQUFPLENBQ0xoQixLQURLLEVBRUxDLE9BRkssRUFHTGdCLFFBSEssS0FJSTtBQUNULFFBQUk7QUFDRlAsTUFBQUEsT0FBTyxDQUFDVixLQUFELEVBQVFDLE9BQVIsRUFBaUJnQixRQUFqQixDQUFQO0FBQ0QsS0FGRCxDQUVFLE9BQU9DLENBQVAsRUFBVTtBQUNWWCxNQUFBQSxXQUFXLElBQUlBLFdBQVcsRUFBMUIsQ0FEVSxDQUVWO0FBQ0E7O0FBQ0FFLE1BQUFBLEVBQUUsSUFBSUEsRUFBRSxDQUFDVSxVQUFILEVBQU47QUFDQSxZQUFNRCxDQUFOO0FBQ0Q7QUFDRixHQWREO0FBZUQsQ0FqQ00iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IEFQSUdhdGV3YXlQcm94eUV2ZW50LCBDb250ZXh0IGFzIExhbWJkYUNvbnRleHQgfSBmcm9tICdhd3MtbGFtYmRhJ1xuaW1wb3J0IHR5cGUgeyBDb25maWcgfSBmcm9tICdhcG9sbG8tc2VydmVyLWxhbWJkYSdcbmltcG9ydCB0eXBlIHsgQ29udGV4dCwgQ29udGV4dEZ1bmN0aW9uIH0gZnJvbSAnYXBvbGxvLXNlcnZlci1jb3JlJ1xuaW1wb3J0IHR5cGUgeyBBdXRoVG9rZW5UeXBlIH0gZnJvbSAnc3JjL2F1dGgvYXV0aEhlYWRlcnMnXG4vL1xuaW1wb3J0IHsgQXBvbGxvU2VydmVyIH0gZnJvbSAnYXBvbGxvLXNlcnZlci1sYW1iZGEnXG5pbXBvcnQgeyBnZXRBdXRoUHJvdmlkZXJUeXBlLCBkZWNvZGVBdXRoVG9rZW4gfSBmcm9tICdzcmMvYXV0aC9hdXRoSGVhZGVycydcbmltcG9ydCB7IHNldENvbnRleHQgfSBmcm9tICdzcmMvZ2xvYmFsQ29udGV4dCdcblxuZXhwb3J0IHR5cGUgR2V0Q3VycmVudFVzZXIgPSAoXG4gIGF1dGhUb2tlbj86IEF1dGhUb2tlblR5cGVcbikgPT4gUHJvbWlzZTxudWxsIHwgb2JqZWN0IHwgc3RyaW5nPlxuXG4vKipcbiAqIFdlIHVzZSBBcG9sbG8gU2VydmVyJ3MgYGNvbnRleHRgIG9wdGlvbiBhcyBhbiBlbnRyeSBwb2ludCBmb3IgY29uc3RydWN0aW5nIG91ciBvd25cbiAqIGdsb2JhbCBjb250ZXh0IG9iamVjdC5cbiAqXG4gKiBDb250ZXh0IGV4cGxhaW5lZCBBcG9sbG8ncyBEb2NzOlxuICogQ29udGV4dCBpcyBhbiBvYmplY3Qgc2hhcmVkIGJ5IGFsbCByZXNvbHZlcnMgaW4gYSBwYXJ0aWN1bGFyIHF1ZXJ5LFxuICogYW5kIGlzIHVzZWQgdG8gY29udGFpbiBwZXItcmVxdWVzdCBzdGF0ZSwgaW5jbHVkaW5nIGF1dGhlbnRpY2F0aW9uIGluZm9ybWF0aW9uLFxuICogZGF0YWxvYWRlciBpbnN0YW5jZXMsIGFuZCBhbnl0aGluZyBlbHNlIHRoYXQgc2hvdWxkIGJlIHRha2VuIGludG8gYWNjb3VudCB3aGVuXG4gKiByZXNvbHZpbmcgdGhlIHF1ZXJ5LlxuICovXG5leHBvcnQgY29uc3QgY3JlYXRlQ29udGV4dEhhbmRsZXIgPSAoXG4gIHVzZXJDb250ZXh0PzogQ29udGV4dCB8IENvbnRleHRGdW5jdGlvbixcbiAgZ2V0Q3VycmVudFVzZXI/OiBHZXRDdXJyZW50VXNlclxuKSA9PiB7XG4gIHJldHVybiBhc3luYyAoe1xuICAgIGV2ZW50LFxuICAgIGNvbnRleHQsXG4gIH06IHtcbiAgICBldmVudDogQVBJR2F0ZXdheVByb3h5RXZlbnRcbiAgICBjb250ZXh0OiBMYW1iZGFDb250ZXh0ICYgeyBba2V5OiBzdHJpbmddOiBhbnkgfVxuICB9KSA9PiB7XG4gICAgLy8gUHJldmVudCB0aGUgTGFtYmRhIGZ1bmN0aW9uIGZyb20gd2FpdGluZyBmb3IgYWxsIHJlc291cmNlcyxcbiAgICAvLyBzdWNoIGFzIGRhdGFiYXNlIGNvbm5lY3Rpb25zLCB0byBiZSByZWxlYXNlZCBiZWZvcmUgcmV0dXJuaW5nIGEgcmVwb25zZS5cbiAgICBjb250ZXh0LmNhbGxiYWNrV2FpdHNGb3JFbXB0eUV2ZW50TG9vcCA9IGZhbHNlXG5cbiAgICAvLyBHZXQgdGhlIGF1dGhvcml6YXRpb24gaW5mb3JtYXRpb24gZnJvbSB0aGUgcmVxdWVzdCBoZWFkZXJzIGFuZCByZXF1ZXN0IGNvbnRleHQuXG4gICAgY29uc3QgdHlwZSA9IGdldEF1dGhQcm92aWRlclR5cGUoZXZlbnQpXG4gICAgaWYgKHR5cGVvZiB0eXBlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uc3QgYXV0aFRva2VuID0gYXdhaXQgZGVjb2RlQXV0aFRva2VuKHsgdHlwZSwgZXZlbnQsIGNvbnRleHQgfSlcbiAgICAgIGNvbnRleHQuY3VycmVudFVzZXIgPVxuICAgICAgICB0eXBlb2YgZ2V0Q3VycmVudFVzZXIgPT0gJ2Z1bmN0aW9uJ1xuICAgICAgICAgID8gYXdhaXQgZ2V0Q3VycmVudFVzZXIoYXV0aFRva2VuKVxuICAgICAgICAgIDogYXV0aFRva2VuXG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiB1c2VyQ29udGV4dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdXNlckNvbnRleHQgPSBhd2FpdCB1c2VyQ29udGV4dCh7IGV2ZW50LCBjb250ZXh0IH0pXG4gICAgfVxuXG4gICAgLy8gU2V0cyB0aGUgKipnbG9iYWwqKiBjb250ZXh0IG9iamVjdCwgd2hpY2ggY2FuIGJlIGltcG9ydGVkIHdpdGg6XG4gICAgLy8gaW1wb3J0IHsgY29udGV4dCB9IGZyb20gJ0ByZWR3b29kanMvYXBpJ1xuICAgIHJldHVybiBzZXRDb250ZXh0KHtcbiAgICAgIC4uLmNvbnRleHQsXG4gICAgICAuLi51c2VyQ29udGV4dCxcbiAgICB9KVxuICB9XG59XG5cbmludGVyZmFjZSBHcmFwaFFMSGFuZGxlck9wdGlvbnMgZXh0ZW5kcyBDb25maWcge1xuICAvKipcbiAgICogTW9kaWZ5IHRoZSByZXNvbHZlciBhbmQgZ2xvYmFsIGNvbnRleHQuXG4gICAqL1xuICBjb250ZXh0PzogQ29udGV4dCB8IENvbnRleHRGdW5jdGlvblxuICAvKipcbiAgICogQW4gYXN5bmMgZnVuY3Rpb24gdGhhdCBtYXBzIHRoZSBhdXRoIHRva2VuIHJldHJpZXZlZCBmcm9tIHRoZSByZXF1ZXN0IGhlYWRlcnMgdG8gYW4gb2JqZWN0LlxuICAgKiBJcyBpdCBleGVjdXRlZCB3aGVuIHRoZSBgYXV0aC1wcm92aWRlcmAgY29udGFpbnMgb25lIG9mIHRoZSBzdXBwb3J0ZWQgcHJvdmlkZXJzLlxuICAgKi9cbiAgZ2V0Q3VycmVudFVzZXI/OiBHZXRDdXJyZW50VXNlclxuICAvKipcbiAgICogQSBjYWxsYmFjayB3aGVuIGFuIHVuaGFuZGxlZCBleGNlcHRpb24gb2NjdXJzLiBVc2UgdGhpcyB0byBkaXNjb25uZWN0IHlvdXIgcHJpc21hXG4gICAqIGluc3RhbmNlLlxuICAgKi9cbiAgb25FeGNlcHRpb24/OiAoKSA9PiB2b2lkXG59XG4vKipcbiAqIENyZWF0ZXMgYW4gQXBvbGxvIEdyYXBoUUwgU2VydmVyLlxuICpcbiAqIGBgYGpzXG4gKiBleHBvcnQgY29uc3QgaGFuZGxlciA9IGNyZWF0ZUdyYXBoUUxIYW5kbGVyKHsgc2NoZW1hLCBjb250ZXh0LCBnZXRDdXJyZW50VXNlciB9KVxuICogYGBgXG4gKi9cbmV4cG9ydCBjb25zdCBjcmVhdGVHcmFwaFFMSGFuZGxlciA9IChcbiAge1xuICAgIGNvbnRleHQsXG4gICAgZ2V0Q3VycmVudFVzZXIsXG4gICAgb25FeGNlcHRpb24sXG4gICAgLi4ub3B0aW9uc1xuICB9OiBHcmFwaFFMSGFuZGxlck9wdGlvbnMgPSB7fSxcbiAgLyoqXG4gICAqIEBkZXByZWNhdGVkIHBsZWFzZSB1c2Ugb25FeGNlcHRpb24gaW5zdGVhZCB0byBkaXNjb25uZWN0IHlvdXIgZGF0YWJhc2UuXG4gICAqICovXG4gIGRiPzogYW55XG4pID0+IHtcbiAgY29uc3QgaGFuZGxlciA9IG5ldyBBcG9sbG9TZXJ2ZXIoe1xuICAgIHBsYXlncm91bmQ6IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicsXG4gICAgLi4ub3B0aW9ucyxcbiAgICBjb250ZXh0OiBjcmVhdGVDb250ZXh0SGFuZGxlcihjb250ZXh0LCBnZXRDdXJyZW50VXNlciksXG4gIH0pLmNyZWF0ZUhhbmRsZXIoKVxuXG4gIHJldHVybiAoXG4gICAgZXZlbnQ6IEFQSUdhdGV3YXlQcm94eUV2ZW50LFxuICAgIGNvbnRleHQ6IExhbWJkYUNvbnRleHQsXG4gICAgY2FsbGJhY2s6IGFueVxuICApOiB2b2lkID0+IHtcbiAgICB0cnkge1xuICAgICAgaGFuZGxlcihldmVudCwgY29udGV4dCwgY2FsbGJhY2spXG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgb25FeGNlcHRpb24gJiYgb25FeGNlcHRpb24oKVxuICAgICAgLy8gRGlzY29ubmVjdCBmcm9tIHRoZSBkYXRhYmFzZSAocmVjb21tZW5kZWQgYnkgUHJpc21hKSwgdGhpcyBzdGVwIHdpbGwgYmVcbiAgICAgIC8vIHJlbW92ZWQgaW4gZnV0dXJlIHJlbGVhc2VzLlxuICAgICAgZGIgJiYgZGIuZGlzY29ubmVjdCgpXG4gICAgICB0aHJvdyBlXG4gICAgfVxuICB9XG59XG4iXX0=
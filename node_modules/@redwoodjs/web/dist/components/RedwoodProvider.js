"use strict";

var _interopRequireWildcard = require("@babel/runtime-corejs3/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js/object/define-property");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.default = void 0;

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/objectSpread2"));

var _extends2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/extends"));

var _regenerator = _interopRequireDefault(require("@babel/runtime-corejs3/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/asyncToGenerator"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/slicedToArray"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/objectWithoutProperties"));

var _react = _interopRequireWildcard(require("react"));

var _graphql = require("../graphql");

var GraphQLProviderWithAuth = function GraphQLProviderWithAuth(_ref) {
  var useAuth = _ref.useAuth,
      _ref$graphQLClientCon = _ref.graphQLClientConfig,
      graphQLClientConfig = _ref$graphQLClientCon === void 0 ? {
    headers: {}
  } : _ref$graphQLClientCon,
      children = _ref.children,
      rest = (0, _objectWithoutProperties2.default)(_ref, ["useAuth", "graphQLClientConfig", "children"]);

  var _useAuth = useAuth(),
      loading = _useAuth.loading,
      isAuthenticated = _useAuth.isAuthenticated,
      getToken = _useAuth.getToken,
      type = _useAuth.type;

  var _useState = (0, _react.useState)(),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      authToken = _useState2[0],
      setAuthToken = _useState2[1];

  (0, _react.useEffect)(function () {
    var fetchAuthToken = /*#__PURE__*/function () {
      var _ref2 = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee() {
        var token;
        return _regenerator.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return getToken();

              case 2:
                token = _context.sent;
                setAuthToken(token);

              case 4:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      return function fetchAuthToken() {
        return _ref2.apply(this, arguments);
      };
    }();

    if (isAuthenticated) {
      fetchAuthToken();
    }
  }, [isAuthenticated, getToken]); // This really sucks because rendering is completely blocked whilst we're
  // restoring authentication. In a lot of cases that's OK since the token is stored
  // in localstorage or a secure cookie.

  if (loading) {
    return null;
  }

  if (!isAuthenticated) {
    return /*#__PURE__*/_react.default.createElement(_graphql.GraphQLProvider, (0, _extends2.default)({
      config: graphQLClientConfig
    }, rest), children);
  } // The user is authenticated, so we have to wait for the auth token to be retrieved
  // before continueing.


  if (!authToken) {
    return null;
  }

  return /*#__PURE__*/_react.default.createElement(_graphql.GraphQLProvider, {
    config: (0, _objectSpread2.default)((0, _objectSpread2.default)({}, graphQLClientConfig), {}, {
      headers: (0, _objectSpread2.default)({
        /** `auth-provider` is used by the API to determine how to decode the token */
        'auth-provider': type,
        authorization: "Bearer ".concat(authToken)
      }, graphQLClientConfig.headers)
    })
  }, children);
};
/**
 * Redwood's Provider is a zeroconf way to tie together authentication and
 * GraphQL requests.
 *
 * When `AuthProvider` is instantiated this component will automatically add
 * Authorization headers to each request.
 */


var RedwoodProvider = function RedwoodProvider(_ref3) {
  var _ref3$useAuth = _ref3.useAuth,
      useAuth = _ref3$useAuth === void 0 ? window.__REDWOOD__USE_AUTH : _ref3$useAuth,
      graphQLClientConfig = _ref3.graphQLClientConfig,
      children = _ref3.children,
      rest = (0, _objectWithoutProperties2.default)(_ref3, ["useAuth", "graphQLClientConfig", "children"]);

  if (typeof useAuth === 'undefined') {
    return /*#__PURE__*/_react.default.createElement(_graphql.GraphQLProvider, (0, _extends2.default)({
      config: graphQLClientConfig
    }, rest), children);
  }

  return /*#__PURE__*/_react.default.createElement(GraphQLProviderWithAuth, (0, _extends2.default)({
    useAuth: useAuth,
    config: graphQLClientConfig
  }, rest), children);
};

var _default = RedwoodProvider;
exports.default = _default;
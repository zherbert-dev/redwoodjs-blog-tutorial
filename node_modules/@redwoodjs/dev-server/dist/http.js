"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js/object/define-property");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.server = exports.setLambdaFunctions = void 0;

var _keys = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/object/keys"));

var _sort = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/instance/sort"));

var _map = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/instance/map"));

var _express = _interopRequireDefault(require("express"));

var _morgan = _interopRequireDefault(require("morgan"));

var _bodyParser = _interopRequireDefault(require("body-parser"));

let LAMBDA_FUNCTIONS = {};

const setLambdaFunctions = functions => {
  LAMBDA_FUNCTIONS = functions;
};

exports.setLambdaFunctions = setLambdaFunctions;

const server = ({
  requestHandler
}) => {
  const app = (0, _express.default)();
  app.use(_bodyParser.default.text({
    type: ['text/*', 'application/json', 'multipart/form-data']
  }));
  app.use(_bodyParser.default.raw({
    type: '*/*'
  }));
  app.use((0, _morgan.default)('dev'));
  app.all('/', (_, res) => {
    var _context, _context2;

    return res.send(`
      <p>The following serverless Functions are available:</p>
      <ol>
        ${(0, _map.default)(_context = (0, _sort.default)(_context2 = (0, _keys.default)(LAMBDA_FUNCTIONS)).call(_context2)).call(_context, name => `<li><a href="/${name}">/${name}</a></li>`).join()}
      </ol>
    `);
  });
  app.all('/:routeName', async (req, res) => {
    const {
      routeName
    } = req.params;
    const lambdaFunction = LAMBDA_FUNCTIONS[routeName];

    if (!lambdaFunction) {
      const errorMessage = `Function "${routeName}" was not found.`;
      console.error(errorMessage);
      res.status(404).send(errorMessage);
      return;
    }

    await requestHandler(req, res, lambdaFunction);
  });
  return app;
};

exports.server = server;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9odHRwLnRzIl0sIm5hbWVzIjpbIkxBTUJEQV9GVU5DVElPTlMiLCJzZXRMYW1iZGFGdW5jdGlvbnMiLCJmdW5jdGlvbnMiLCJzZXJ2ZXIiLCJyZXF1ZXN0SGFuZGxlciIsImFwcCIsInVzZSIsImJvZHlQYXJzZXIiLCJ0ZXh0IiwidHlwZSIsInJhdyIsImFsbCIsIl8iLCJyZXMiLCJzZW5kIiwibmFtZSIsImpvaW4iLCJyZXEiLCJyb3V0ZU5hbWUiLCJwYXJhbXMiLCJsYW1iZGFGdW5jdGlvbiIsImVycm9yTWVzc2FnZSIsImNvbnNvbGUiLCJlcnJvciIsInN0YXR1cyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBS0EsSUFBSUEsZ0JBQXlCLEdBQUcsRUFBaEM7O0FBQ08sTUFBTUMsa0JBQWtCLEdBQUlDLFNBQUQsSUFBOEI7QUFDOURGLEVBQUFBLGdCQUFnQixHQUFHRSxTQUFuQjtBQUNELENBRk07Ozs7QUFJQSxNQUFNQyxNQUFNLEdBQUcsQ0FBQztBQUNyQkMsRUFBQUE7QUFEcUIsQ0FBRCxLQUlYO0FBQ1QsUUFBTUMsR0FBRyxHQUFHLHVCQUFaO0FBQ0FBLEVBQUFBLEdBQUcsQ0FBQ0MsR0FBSixDQUNFQyxvQkFBV0MsSUFBWCxDQUFnQjtBQUNkQyxJQUFBQSxJQUFJLEVBQUUsQ0FBQyxRQUFELEVBQVcsa0JBQVgsRUFBK0IscUJBQS9CO0FBRFEsR0FBaEIsQ0FERjtBQUtBSixFQUFBQSxHQUFHLENBQUNDLEdBQUosQ0FBUUMsb0JBQVdHLEdBQVgsQ0FBZTtBQUFFRCxJQUFBQSxJQUFJLEVBQUU7QUFBUixHQUFmLENBQVI7QUFDQUosRUFBQUEsR0FBRyxDQUFDQyxHQUFKLENBQVEscUJBQU8sS0FBUCxDQUFSO0FBRUFELEVBQUFBLEdBQUcsQ0FBQ00sR0FBSixDQUFRLEdBQVIsRUFBYSxDQUFDQyxDQUFELEVBQUlDLEdBQUosS0FBWTtBQUFBOztBQUN2QixXQUFPQSxHQUFHLENBQUNDLElBQUosQ0FBVTs7O1VBR1gsK0VBQVlkLGdCQUFaLG1DQUVNZSxJQUFELElBQVcsaUJBQWdCQSxJQUFLLE1BQUtBLElBQUssV0FGL0MsRUFHQ0MsSUFIRCxFQUdROztLQU5QLENBQVA7QUFTRCxHQVZEO0FBWUFYLEVBQUFBLEdBQUcsQ0FBQ00sR0FBSixDQUNFLGFBREYsRUFFRSxPQUFPTSxHQUFQLEVBQXFCSixHQUFyQixLQUFzRDtBQUNwRCxVQUFNO0FBQUVLLE1BQUFBO0FBQUYsUUFBZ0JELEdBQUcsQ0FBQ0UsTUFBMUI7QUFDQSxVQUFNQyxjQUFjLEdBQUdwQixnQkFBZ0IsQ0FBQ2tCLFNBQUQsQ0FBdkM7O0FBQ0EsUUFBSSxDQUFDRSxjQUFMLEVBQXFCO0FBQ25CLFlBQU1DLFlBQVksR0FBSSxhQUFZSCxTQUFVLGtCQUE1QztBQUNBSSxNQUFBQSxPQUFPLENBQUNDLEtBQVIsQ0FBY0YsWUFBZDtBQUNBUixNQUFBQSxHQUFHLENBQUNXLE1BQUosQ0FBVyxHQUFYLEVBQWdCVixJQUFoQixDQUFxQk8sWUFBckI7QUFDQTtBQUNEOztBQUNELFVBQU1qQixjQUFjLENBQUNhLEdBQUQsRUFBTUosR0FBTixFQUFXTyxjQUFYLENBQXBCO0FBQ0QsR0FaSDtBQWVBLFNBQU9mLEdBQVA7QUFDRCxDQTFDTSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgUmVzcG9uc2UsIFJlcXVlc3QgfSBmcm9tICdleHByZXNzJ1xuaW1wb3J0IGV4cHJlc3MgZnJvbSAnZXhwcmVzcydcbmltcG9ydCBtb3JnYW4gZnJvbSAnbW9yZ2FuJ1xuaW1wb3J0IGJvZHlQYXJzZXIgZnJvbSAnYm9keS1wYXJzZXInXG5cbmV4cG9ydCBpbnRlcmZhY2UgTGFtYmRhcyB7XG4gIFtwYXRoOiBzdHJpbmddOiBhbnlcbn1cbmxldCBMQU1CREFfRlVOQ1RJT05TOiBMYW1iZGFzID0ge31cbmV4cG9ydCBjb25zdCBzZXRMYW1iZGFGdW5jdGlvbnMgPSAoZnVuY3Rpb25zOiBMYW1iZGFzKTogdm9pZCA9PiB7XG4gIExBTUJEQV9GVU5DVElPTlMgPSBmdW5jdGlvbnNcbn1cblxuZXhwb3J0IGNvbnN0IHNlcnZlciA9ICh7XG4gIHJlcXVlc3RIYW5kbGVyLFxufToge1xuICByZXF1ZXN0SGFuZGxlcjogKHJlcTogUmVxdWVzdCwgcmVzOiBSZXNwb25zZSwgbGFtYmRhRnVuY3Rpb246IGFueSkgPT4gdm9pZFxufSk6IGFueSA9PiB7XG4gIGNvbnN0IGFwcCA9IGV4cHJlc3MoKVxuICBhcHAudXNlKFxuICAgIGJvZHlQYXJzZXIudGV4dCh7XG4gICAgICB0eXBlOiBbJ3RleHQvKicsICdhcHBsaWNhdGlvbi9qc29uJywgJ211bHRpcGFydC9mb3JtLWRhdGEnXSxcbiAgICB9KVxuICApXG4gIGFwcC51c2UoYm9keVBhcnNlci5yYXcoeyB0eXBlOiAnKi8qJyB9KSlcbiAgYXBwLnVzZShtb3JnYW4oJ2RldicpKVxuXG4gIGFwcC5hbGwoJy8nLCAoXywgcmVzKSA9PiB7XG4gICAgcmV0dXJuIHJlcy5zZW5kKGBcbiAgICAgIDxwPlRoZSBmb2xsb3dpbmcgc2VydmVybGVzcyBGdW5jdGlvbnMgYXJlIGF2YWlsYWJsZTo8L3A+XG4gICAgICA8b2w+XG4gICAgICAgICR7T2JqZWN0LmtleXMoTEFNQkRBX0ZVTkNUSU9OUylcbiAgICAgICAgICAuc29ydCgpXG4gICAgICAgICAgLm1hcCgobmFtZSkgPT4gYDxsaT48YSBocmVmPVwiLyR7bmFtZX1cIj4vJHtuYW1lfTwvYT48L2xpPmApXG4gICAgICAgICAgLmpvaW4oKX1cbiAgICAgIDwvb2w+XG4gICAgYClcbiAgfSlcblxuICBhcHAuYWxsKFxuICAgICcvOnJvdXRlTmFtZScsXG4gICAgYXN5bmMgKHJlcTogUmVxdWVzdCwgcmVzOiBSZXNwb25zZSk6IFByb21pc2U8dm9pZD4gPT4ge1xuICAgICAgY29uc3QgeyByb3V0ZU5hbWUgfSA9IHJlcS5wYXJhbXNcbiAgICAgIGNvbnN0IGxhbWJkYUZ1bmN0aW9uID0gTEFNQkRBX0ZVTkNUSU9OU1tyb3V0ZU5hbWVdXG4gICAgICBpZiAoIWxhbWJkYUZ1bmN0aW9uKSB7XG4gICAgICAgIGNvbnN0IGVycm9yTWVzc2FnZSA9IGBGdW5jdGlvbiBcIiR7cm91dGVOYW1lfVwiIHdhcyBub3QgZm91bmQuYFxuICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yTWVzc2FnZSlcbiAgICAgICAgcmVzLnN0YXR1cyg0MDQpLnNlbmQoZXJyb3JNZXNzYWdlKVxuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICAgIGF3YWl0IHJlcXVlc3RIYW5kbGVyKHJlcSwgcmVzLCBsYW1iZGFGdW5jdGlvbilcbiAgICB9XG4gIClcblxuICByZXR1cm4gYXBwXG59XG4iXX0=
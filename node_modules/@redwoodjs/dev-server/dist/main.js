#!/usr/bin/env node
"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js/object/define-property");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.getArgsForSide = void 0;

var _yargs = _interopRequireDefault(require("yargs"));

var _internal = require("@redwoodjs/internal");

var _http = require("./http");

var _watchApiSide = require("./watchApiSide");

var _awsLambda = require("./requestHandlers/awsLambda");

// TODO: Expand the sides once that concept is introduced.
const getArgsForSide = side => {
  const config = (0, _internal.getConfig)();
  const {
    port,
    host
  } = config[side];
  const paths = (0, _internal.getPaths)();
  return {
    port,
    host,
    paths: paths[side]
  };
};

exports.getArgsForSide = getArgsForSide;

const {
  side
} = _yargs.default.option('side', {
  default: 'api'
}).argv;

try {
  const {
    host,
    port,
    paths
  } = getArgsForSide(side);
  (0, _http.server)({
    requestHandler: _awsLambda.requestHandler
  }).listen(port, () => {
    console.log(`Running at 'http://${host}:${port}'`);
    console.log(`Watching files in '${paths.functions}'`);
    let startBuild = new Date().getTime();
    (0, _watchApiSide.watchFunctions)({
      paths,
      onChange: () => {
        startBuild = new Date().getTime();
        process.stdout.write('Change detected, building... ');
      },
      onImport: functions => {
        console.log(`Done. Took ${new Date().getTime() - startBuild}ms.`);
        (0, _http.setLambdaFunctions)(functions);
      }
    });
  });
} catch (e) {
  console.error(e.message);
  process.exit(1);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9tYWluLnRzIl0sIm5hbWVzIjpbImdldEFyZ3NGb3JTaWRlIiwic2lkZSIsImNvbmZpZyIsInBvcnQiLCJob3N0IiwicGF0aHMiLCJ5YXJncyIsIm9wdGlvbiIsImRlZmF1bHQiLCJhcmd2IiwicmVxdWVzdEhhbmRsZXIiLCJsaXN0ZW4iLCJjb25zb2xlIiwibG9nIiwiZnVuY3Rpb25zIiwic3RhcnRCdWlsZCIsIkRhdGUiLCJnZXRUaW1lIiwib25DaGFuZ2UiLCJwcm9jZXNzIiwic3Rkb3V0Iiwid3JpdGUiLCJvbkltcG9ydCIsImUiLCJlcnJvciIsIm1lc3NhZ2UiLCJleGl0Il0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7OztBQUNBOztBQUNBOztBQUdBOztBQUNBOztBQUNBOztBQUVBO0FBQ08sTUFBTUEsY0FBYyxHQUN6QkMsSUFENEIsSUFNekI7QUFDSCxRQUFNQyxNQUFNLEdBQUcsMEJBQWY7QUFDQSxRQUFNO0FBQUVDLElBQUFBLElBQUY7QUFBUUMsSUFBQUE7QUFBUixNQUFpQkYsTUFBTSxDQUFDRCxJQUFELENBQTdCO0FBRUEsUUFBTUksS0FBSyxHQUFHLHlCQUFkO0FBRUEsU0FBTztBQUNMRixJQUFBQSxJQURLO0FBRUxDLElBQUFBLElBRks7QUFHTEMsSUFBQUEsS0FBSyxFQUFFQSxLQUFLLENBQUNKLElBQUQ7QUFIUCxHQUFQO0FBS0QsQ0FqQk07Ozs7QUFtQlAsTUFBTTtBQUFFQSxFQUFBQTtBQUFGLElBQVdLLGVBQU1DLE1BQU4sQ0FBYSxNQUFiLEVBQXFCO0FBQUVDLEVBQUFBLE9BQU8sRUFBRTtBQUFYLENBQXJCLEVBQXlDQyxJQUExRDs7QUFFQSxJQUFJO0FBQ0YsUUFBTTtBQUFFTCxJQUFBQSxJQUFGO0FBQVFELElBQUFBLElBQVI7QUFBY0UsSUFBQUE7QUFBZCxNQUF3QkwsY0FBYyxDQUFDQyxJQUFELENBQTVDO0FBQ0Esb0JBQU87QUFBRVMsSUFBQUEsY0FBYyxFQUFkQTtBQUFGLEdBQVAsRUFBMkJDLE1BQTNCLENBQWtDUixJQUFsQyxFQUF3QyxNQUFNO0FBQzVDUyxJQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBYSxzQkFBcUJULElBQUssSUFBR0QsSUFBSyxHQUEvQztBQUNBUyxJQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBYSxzQkFBcUJSLEtBQUssQ0FBQ1MsU0FBVSxHQUFsRDtBQUNBLFFBQUlDLFVBQVUsR0FBRyxJQUFJQyxJQUFKLEdBQVdDLE9BQVgsRUFBakI7QUFDQSxzQ0FBZTtBQUNiWixNQUFBQSxLQURhO0FBRWJhLE1BQUFBLFFBQVEsRUFBRSxNQUFNO0FBQ2RILFFBQUFBLFVBQVUsR0FBRyxJQUFJQyxJQUFKLEdBQVdDLE9BQVgsRUFBYjtBQUNBRSxRQUFBQSxPQUFPLENBQUNDLE1BQVIsQ0FBZUMsS0FBZixDQUFxQiwrQkFBckI7QUFDRCxPQUxZO0FBTWJDLE1BQUFBLFFBQVEsRUFBR1IsU0FBRCxJQUFlO0FBQ3ZCRixRQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBYSxjQUFhLElBQUlHLElBQUosR0FBV0MsT0FBWCxLQUF1QkYsVUFBVyxLQUE1RDtBQUNBLHNDQUFtQkQsU0FBbkI7QUFDRDtBQVRZLEtBQWY7QUFXRCxHQWZEO0FBZ0JELENBbEJELENBa0JFLE9BQU9TLENBQVAsRUFBVTtBQUNWWCxFQUFBQSxPQUFPLENBQUNZLEtBQVIsQ0FBY0QsQ0FBQyxDQUFDRSxPQUFoQjtBQUNBTixFQUFBQSxPQUFPLENBQUNPLElBQVIsQ0FBYSxDQUFiO0FBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyIjIS91c3IvYmluL2VudiBub2RlXG5pbXBvcnQgeWFyZ3MgZnJvbSAneWFyZ3MnXG5pbXBvcnQgeyBnZXRDb25maWcsIGdldFBhdGhzIH0gZnJvbSAnQHJlZHdvb2Rqcy9pbnRlcm5hbCdcbmltcG9ydCB0eXBlIHsgTm9kZVRhcmdldFBhdGhzIH0gZnJvbSAnQHJlZHdvb2Rqcy9pbnRlcm5hbCdcblxuaW1wb3J0IHsgc2VydmVyLCBzZXRMYW1iZGFGdW5jdGlvbnMgfSBmcm9tICcuL2h0dHAnXG5pbXBvcnQgeyB3YXRjaEZ1bmN0aW9ucyB9IGZyb20gJy4vd2F0Y2hBcGlTaWRlJ1xuaW1wb3J0IHsgcmVxdWVzdEhhbmRsZXIgfSBmcm9tICcuL3JlcXVlc3RIYW5kbGVycy9hd3NMYW1iZGEnXG5cbi8vIFRPRE86IEV4cGFuZCB0aGUgc2lkZXMgb25jZSB0aGF0IGNvbmNlcHQgaXMgaW50cm9kdWNlZC5cbmV4cG9ydCBjb25zdCBnZXRBcmdzRm9yU2lkZSA9IChcbiAgc2lkZTogJ2FwaSdcbik6IHtcbiAgcG9ydDogbnVtYmVyXG4gIGhvc3Q6IHN0cmluZ1xuICBwYXRoczogTm9kZVRhcmdldFBhdGhzXG59ID0+IHtcbiAgY29uc3QgY29uZmlnID0gZ2V0Q29uZmlnKClcbiAgY29uc3QgeyBwb3J0LCBob3N0IH0gPSBjb25maWdbc2lkZV1cblxuICBjb25zdCBwYXRocyA9IGdldFBhdGhzKClcblxuICByZXR1cm4ge1xuICAgIHBvcnQsXG4gICAgaG9zdCxcbiAgICBwYXRoczogcGF0aHNbc2lkZV0sXG4gIH1cbn1cblxuY29uc3QgeyBzaWRlIH0gPSB5YXJncy5vcHRpb24oJ3NpZGUnLCB7IGRlZmF1bHQ6ICdhcGknIH0pLmFyZ3ZcblxudHJ5IHtcbiAgY29uc3QgeyBob3N0LCBwb3J0LCBwYXRocyB9ID0gZ2V0QXJnc0ZvclNpZGUoc2lkZSBhcyAnYXBpJylcbiAgc2VydmVyKHsgcmVxdWVzdEhhbmRsZXIgfSkubGlzdGVuKHBvcnQsICgpID0+IHtcbiAgICBjb25zb2xlLmxvZyhgUnVubmluZyBhdCAnaHR0cDovLyR7aG9zdH06JHtwb3J0fSdgKVxuICAgIGNvbnNvbGUubG9nKGBXYXRjaGluZyBmaWxlcyBpbiAnJHtwYXRocy5mdW5jdGlvbnN9J2ApXG4gICAgbGV0IHN0YXJ0QnVpbGQgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKVxuICAgIHdhdGNoRnVuY3Rpb25zKHtcbiAgICAgIHBhdGhzLFxuICAgICAgb25DaGFuZ2U6ICgpID0+IHtcbiAgICAgICAgc3RhcnRCdWlsZCA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpXG4gICAgICAgIHByb2Nlc3Muc3Rkb3V0LndyaXRlKCdDaGFuZ2UgZGV0ZWN0ZWQsIGJ1aWxkaW5nLi4uICcpXG4gICAgICB9LFxuICAgICAgb25JbXBvcnQ6IChmdW5jdGlvbnMpID0+IHtcbiAgICAgICAgY29uc29sZS5sb2coYERvbmUuIFRvb2sgJHtuZXcgRGF0ZSgpLmdldFRpbWUoKSAtIHN0YXJ0QnVpbGR9bXMuYClcbiAgICAgICAgc2V0TGFtYmRhRnVuY3Rpb25zKGZ1bmN0aW9ucylcbiAgICAgIH0sXG4gICAgfSlcbiAgfSlcbn0gY2F0Y2ggKGUpIHtcbiAgY29uc29sZS5lcnJvcihlLm1lc3NhZ2UpXG4gIHByb2Nlc3MuZXhpdCgxKVxufVxuIl19
"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js/object/define-property");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.watchFunctions = exports.importFreshFunctions = void 0;

var _endsWith = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/instance/ends-with"));

var _some = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/instance/some"));

var _includes = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/instance/includes"));

var _keys = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/object/keys"));

var _forEach = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/instance/for-each"));

var _path = _interopRequireDefault(require("path"));

var _chokidar = _interopRequireDefault(require("chokidar"));

var _register = _interopRequireDefault(require("@babel/register"));

var _requireDir = _interopRequireDefault(require("require-dir"));

// TODO: This file "watches" side for changes, but it's out of scope the "dev-server"
// package.
// Ideally a user will be able to deploy the "dev-server"/ "redwood-http-server" on
// their own infrastructure, in which case the ability to live-reload changes doesn't
// make sense.
const WATCHER_IGNORE_EXTENSIONS = ['.db', '.sqlite', '-journal'];

/**
 * Purge the require cache and import them again.
 */
const importFreshFunctions = functionsPath => {
  var _context;

  (0, _forEach.default)(_context = (0, _keys.default)(require.cache)).call(_context, key => {
    delete require.cache[key];
  });
  return (0, _requireDir.default)(functionsPath, {
    recurse: false,
    extensions: ['.js', '.ts']
  });
};

exports.importFreshFunctions = importFreshFunctions;

const watchFunctions = ({
  paths,
  onChange,
  onImport
}) => {
  // Use babel-register to add a require hook:
  // > The require hook will bind itself to node's require and automatically
  // > compile files on the fly.
  //
  // This will use the `.babelrc.js` configuration file in the base directory
  // of the project, usually `./api/.babelrc.js`
  (0, _register.default)({
    extends: _path.default.join(paths.base, '.babelrc.js'),
    extensions: ['.js', '.ts'],
    only: [paths.base],
    ignore: ['node_modules'],
    cache: false
  });
  const functions = importFreshFunctions(paths.functions);
  onImport(functions);

  const watcher = _chokidar.default.watch(paths.base, {
    ignored: file => (0, _includes.default)(file).call(file, 'node_modules') || (0, _some.default)(WATCHER_IGNORE_EXTENSIONS).call(WATCHER_IGNORE_EXTENSIONS, ext => (0, _endsWith.default)(file).call(file, ext))
  });

  watcher.on('ready', () => {
    watcher.on('all', (event, path) => {
      onChange(event, path);
      const functions = importFreshFunctions(paths.functions);
      onImport(functions);
    });
  });
};

exports.watchFunctions = watchFunctions;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy93YXRjaEFwaVNpZGUudHMiXSwibmFtZXMiOlsiV0FUQ0hFUl9JR05PUkVfRVhURU5TSU9OUyIsImltcG9ydEZyZXNoRnVuY3Rpb25zIiwiZnVuY3Rpb25zUGF0aCIsInJlcXVpcmUiLCJjYWNoZSIsImtleSIsInJlY3Vyc2UiLCJleHRlbnNpb25zIiwid2F0Y2hGdW5jdGlvbnMiLCJwYXRocyIsIm9uQ2hhbmdlIiwib25JbXBvcnQiLCJleHRlbmRzIiwicGF0aCIsImpvaW4iLCJiYXNlIiwib25seSIsImlnbm9yZSIsImZ1bmN0aW9ucyIsIndhdGNoZXIiLCJjaG9raWRhciIsIndhdGNoIiwiaWdub3JlZCIsImZpbGUiLCJleHQiLCJvbiIsImV2ZW50Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBTUE7O0FBR0E7O0FBQ0E7O0FBQ0E7O0FBWEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVNBLE1BQU1BLHlCQUF5QixHQUFHLENBQUMsS0FBRCxFQUFRLFNBQVIsRUFBbUIsVUFBbkIsQ0FBbEM7O0FBTUE7OztBQUdPLE1BQU1DLG9CQUFvQixHQUFJQyxhQUFELElBQXNDO0FBQUE7O0FBQ3hFLHNEQUFZQyxPQUFPLENBQUNDLEtBQXBCLGtCQUFvQ0MsR0FBRCxJQUFTO0FBQzFDLFdBQU9GLE9BQU8sQ0FBQ0MsS0FBUixDQUFjQyxHQUFkLENBQVA7QUFDRCxHQUZEO0FBSUEsU0FBTyx5QkFBV0gsYUFBWCxFQUEwQjtBQUMvQkksSUFBQUEsT0FBTyxFQUFFLEtBRHNCO0FBRS9CQyxJQUFBQSxVQUFVLEVBQUUsQ0FBQyxLQUFELEVBQVEsS0FBUjtBQUZtQixHQUExQixDQUFQO0FBSUQsQ0FUTTs7OztBQVdBLE1BQU1DLGNBQWMsR0FBRyxDQUFDO0FBQzdCQyxFQUFBQSxLQUQ2QjtBQUU3QkMsRUFBQUEsUUFGNkI7QUFHN0JDLEVBQUFBO0FBSDZCLENBQUQsS0FRbEI7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBaUI7QUFDZkMsSUFBQUEsT0FBTyxFQUFFQyxjQUFLQyxJQUFMLENBQVVMLEtBQUssQ0FBQ00sSUFBaEIsRUFBc0IsYUFBdEIsQ0FETTtBQUVmUixJQUFBQSxVQUFVLEVBQUUsQ0FBQyxLQUFELEVBQVEsS0FBUixDQUZHO0FBR2ZTLElBQUFBLElBQUksRUFBRSxDQUFDUCxLQUFLLENBQUNNLElBQVAsQ0FIUztBQUlmRSxJQUFBQSxNQUFNLEVBQUUsQ0FBQyxjQUFELENBSk87QUFLZmIsSUFBQUEsS0FBSyxFQUFFO0FBTFEsR0FBakI7QUFRQSxRQUFNYyxTQUFTLEdBQUdqQixvQkFBb0IsQ0FBQ1EsS0FBSyxDQUFDUyxTQUFQLENBQXRDO0FBQ0FQLEVBQUFBLFFBQVEsQ0FBQ08sU0FBRCxDQUFSOztBQUVBLFFBQU1DLE9BQU8sR0FBR0Msa0JBQVNDLEtBQVQsQ0FBZVosS0FBSyxDQUFDTSxJQUFyQixFQUEyQjtBQUN6Q08sSUFBQUEsT0FBTyxFQUFHQyxJQUFELElBQ1AsdUJBQUFBLElBQUksTUFBSixDQUFBQSxJQUFJLEVBQVUsY0FBVixDQUFKLElBQ0EsbUJBQUF2Qix5QkFBeUIsTUFBekIsQ0FBQUEseUJBQXlCLEVBQU93QixHQUFELElBQVMsdUJBQUFELElBQUksTUFBSixDQUFBQSxJQUFJLEVBQVVDLEdBQVYsQ0FBbkI7QUFIYyxHQUEzQixDQUFoQjs7QUFLQUwsRUFBQUEsT0FBTyxDQUFDTSxFQUFSLENBQVcsT0FBWCxFQUFvQixNQUFNO0FBQ3hCTixJQUFBQSxPQUFPLENBQUNNLEVBQVIsQ0FBVyxLQUFYLEVBQWtCLENBQUNDLEtBQUQsRUFBUWIsSUFBUixLQUFpQjtBQUNqQ0gsTUFBQUEsUUFBUSxDQUFDZ0IsS0FBRCxFQUFRYixJQUFSLENBQVI7QUFDQSxZQUFNSyxTQUFTLEdBQUdqQixvQkFBb0IsQ0FBQ1EsS0FBSyxDQUFDUyxTQUFQLENBQXRDO0FBQ0FQLE1BQUFBLFFBQVEsQ0FBQ08sU0FBRCxDQUFSO0FBQ0QsS0FKRDtBQUtELEdBTkQ7QUFPRCxDQXRDTSIsInNvdXJjZXNDb250ZW50IjpbIi8vIFRPRE86IFRoaXMgZmlsZSBcIndhdGNoZXNcIiBzaWRlIGZvciBjaGFuZ2VzLCBidXQgaXQncyBvdXQgb2Ygc2NvcGUgdGhlIFwiZGV2LXNlcnZlclwiXG4vLyBwYWNrYWdlLlxuLy8gSWRlYWxseSBhIHVzZXIgd2lsbCBiZSBhYmxlIHRvIGRlcGxveSB0aGUgXCJkZXYtc2VydmVyXCIvIFwicmVkd29vZC1odHRwLXNlcnZlclwiIG9uXG4vLyB0aGVpciBvd24gaW5mcmFzdHJ1Y3R1cmUsIGluIHdoaWNoIGNhc2UgdGhlIGFiaWxpdHkgdG8gbGl2ZS1yZWxvYWQgY2hhbmdlcyBkb2Vzbid0XG4vLyBtYWtlIHNlbnNlLlxuXG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJ1xuXG5pbXBvcnQgdHlwZSB7IE5vZGVUYXJnZXRQYXRocyB9IGZyb20gJ0ByZWR3b29kanMvaW50ZXJuYWwnXG5pbXBvcnQgY2hva2lkYXIgZnJvbSAnY2hva2lkYXInXG5pbXBvcnQgYmFiZWxSZXF1aXJlSG9vayBmcm9tICdAYmFiZWwvcmVnaXN0ZXInXG5pbXBvcnQgcmVxdWlyZURpciBmcm9tICdyZXF1aXJlLWRpcidcblxuY29uc3QgV0FUQ0hFUl9JR05PUkVfRVhURU5TSU9OUyA9IFsnLmRiJywgJy5zcWxpdGUnLCAnLWpvdXJuYWwnXVxuXG5leHBvcnQgaW50ZXJmYWNlIEZ1bmN0aW9ucyB7XG4gIFtwYXRoOiBzdHJpbmddOiBhbnlcbn1cblxuLyoqXG4gKiBQdXJnZSB0aGUgcmVxdWlyZSBjYWNoZSBhbmQgaW1wb3J0IHRoZW0gYWdhaW4uXG4gKi9cbmV4cG9ydCBjb25zdCBpbXBvcnRGcmVzaEZ1bmN0aW9ucyA9IChmdW5jdGlvbnNQYXRoOiBzdHJpbmcpOiBGdW5jdGlvbnMgPT4ge1xuICBPYmplY3Qua2V5cyhyZXF1aXJlLmNhY2hlKS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICBkZWxldGUgcmVxdWlyZS5jYWNoZVtrZXldXG4gIH0pXG5cbiAgcmV0dXJuIHJlcXVpcmVEaXIoZnVuY3Rpb25zUGF0aCwge1xuICAgIHJlY3Vyc2U6IGZhbHNlLFxuICAgIGV4dGVuc2lvbnM6IFsnLmpzJywgJy50cyddLFxuICB9KVxufVxuXG5leHBvcnQgY29uc3Qgd2F0Y2hGdW5jdGlvbnMgPSAoe1xuICBwYXRocyxcbiAgb25DaGFuZ2UsXG4gIG9uSW1wb3J0LFxufToge1xuICBwYXRoczogTm9kZVRhcmdldFBhdGhzXG4gIG9uQ2hhbmdlOiAoZXZlbnQ6IHN0cmluZywgcGF0aDogc3RyaW5nKSA9PiB2b2lkXG4gIG9uSW1wb3J0OiAoZnVuY3Rpb25zOiBGdW5jdGlvbnMpID0+IHZvaWRcbn0pOiB2b2lkID0+IHtcbiAgLy8gVXNlIGJhYmVsLXJlZ2lzdGVyIHRvIGFkZCBhIHJlcXVpcmUgaG9vazpcbiAgLy8gPiBUaGUgcmVxdWlyZSBob29rIHdpbGwgYmluZCBpdHNlbGYgdG8gbm9kZSdzIHJlcXVpcmUgYW5kIGF1dG9tYXRpY2FsbHlcbiAgLy8gPiBjb21waWxlIGZpbGVzIG9uIHRoZSBmbHkuXG4gIC8vXG4gIC8vIFRoaXMgd2lsbCB1c2UgdGhlIGAuYmFiZWxyYy5qc2AgY29uZmlndXJhdGlvbiBmaWxlIGluIHRoZSBiYXNlIGRpcmVjdG9yeVxuICAvLyBvZiB0aGUgcHJvamVjdCwgdXN1YWxseSBgLi9hcGkvLmJhYmVscmMuanNgXG4gIGJhYmVsUmVxdWlyZUhvb2soe1xuICAgIGV4dGVuZHM6IHBhdGguam9pbihwYXRocy5iYXNlLCAnLmJhYmVscmMuanMnKSxcbiAgICBleHRlbnNpb25zOiBbJy5qcycsICcudHMnXSxcbiAgICBvbmx5OiBbcGF0aHMuYmFzZV0sXG4gICAgaWdub3JlOiBbJ25vZGVfbW9kdWxlcyddLFxuICAgIGNhY2hlOiBmYWxzZSxcbiAgfSlcblxuICBjb25zdCBmdW5jdGlvbnMgPSBpbXBvcnRGcmVzaEZ1bmN0aW9ucyhwYXRocy5mdW5jdGlvbnMpXG4gIG9uSW1wb3J0KGZ1bmN0aW9ucylcblxuICBjb25zdCB3YXRjaGVyID0gY2hva2lkYXIud2F0Y2gocGF0aHMuYmFzZSwge1xuICAgIGlnbm9yZWQ6IChmaWxlOiBzdHJpbmcpID0+XG4gICAgICBmaWxlLmluY2x1ZGVzKCdub2RlX21vZHVsZXMnKSB8fFxuICAgICAgV0FUQ0hFUl9JR05PUkVfRVhURU5TSU9OUy5zb21lKChleHQpID0+IGZpbGUuZW5kc1dpdGgoZXh0KSksXG4gIH0pXG4gIHdhdGNoZXIub24oJ3JlYWR5JywgKCkgPT4ge1xuICAgIHdhdGNoZXIub24oJ2FsbCcsIChldmVudCwgcGF0aCkgPT4ge1xuICAgICAgb25DaGFuZ2UoZXZlbnQsIHBhdGgpXG4gICAgICBjb25zdCBmdW5jdGlvbnMgPSBpbXBvcnRGcmVzaEZ1bmN0aW9ucyhwYXRocy5mdW5jdGlvbnMpXG4gICAgICBvbkltcG9ydChmdW5jdGlvbnMpXG4gICAgfSlcbiAgfSlcbn1cbiJdfQ==
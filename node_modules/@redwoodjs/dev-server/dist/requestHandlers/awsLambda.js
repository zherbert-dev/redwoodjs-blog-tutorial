"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js/object/define-property");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.requestHandler = exports.parseBody = void 0;

var _stringify = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/json/stringify"));

var _keys = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/object/keys"));

var _forEach = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/instance/for-each"));

var _qs = _interopRequireDefault(require("qs"));

const parseBody = rawBody => {
  if (typeof rawBody === 'string') {
    return {
      body: rawBody,
      isBase64Encoded: false
    };
  }

  if (rawBody instanceof Buffer) {
    return {
      body: rawBody.toString('base64'),
      isBase64Encoded: true
    };
  }

  return {
    body: '',
    isBase64Encoded: false
  };
};

exports.parseBody = parseBody;

const lambdaEventForExpressRequest = request => {
  return {
    httpMethod: request.method,
    headers: request.headers,
    path: request.path,
    queryStringParameters: _qs.default.parse(request.url.split(/\?(.+)/)[1]),
    requestContext: {
      identity: {
        sourceIp: request.ip
      }
    },
    ...parseBody(request.body) // adds `body` and `isBase64Encoded`

  };
};

const expressResponseForLambdaResult = (expressResFn, lambdaResult) => {
  const {
    statusCode = 200,
    headers,
    body = ''
  } = lambdaResult;

  if (headers) {
    var _context;

    (0, _forEach.default)(_context = (0, _keys.default)(headers)).call(_context, headerName => {
      const headerValue = headers[headerName];
      expressResFn.setHeader(headerName, headerValue);
    });
  }

  expressResFn.statusCode = statusCode; // The AWS lambda docs specify that the response object must be
  // compatible with `JSON.stringify`, but the type definition specifices that
  // it must be a string.

  return expressResFn.end(typeof body === 'string' ? body : (0, _stringify.default)(body));
};

const expressResponseForLambdaError = (expressResFn, error) => {
  console.error(error);
  expressResFn.status(500).send(error);
};

const requestHandler = async (req, res, lambdaFunction) => {
  const {
    routeName
  } = req.params;
  const {
    handler
  } = lambdaFunction;

  if (typeof handler !== 'function') {
    const errorMessage = `"${routeName}" does not export a function named "handler"`;
    console.error(errorMessage);
    return res.status(500).send(errorMessage);
  } // We take the express request object and convert it into a lambda function event.


  const event = lambdaEventForExpressRequest(req);

  const handlerCallback = expressResFn => (error, lambdaResult) => {
    if (error) {
      return expressResponseForLambdaError(expressResFn, error);
    }

    return expressResponseForLambdaResult(expressResFn, lambdaResult);
  }; // Execute the lambda function.
  // https://docs.aws.amazon.com/lambda/latest/dg/nodejs-prog-model-handler.html


  const handlerPromise = handler(event, {}, // TODO: Add support for context: https://github.com/DefinitelyTyped/DefinitelyTyped/blob/0bb210867d16170c4a08d9ce5d132817651a0f80/types/aws-lambda/index.d.ts#L443-L467
  handlerCallback(res)); // In this case the handlerCallback should not be called.

  if (handlerPromise && typeof handlerPromise.then === 'function') {
    try {
      const lambaResponse = await handlerPromise;
      return expressResponseForLambdaResult(res, lambaResponse);
    } catch (error) {
      return expressResponseForLambdaError(res, error);
    }
  }
};

exports.requestHandler = requestHandler;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
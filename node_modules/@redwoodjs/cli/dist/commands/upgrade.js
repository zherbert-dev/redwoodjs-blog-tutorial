"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js/object/define-property");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.handler = exports.builder = exports.desc = exports.command = void 0;

var _includes = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/instance/includes"));

var _execa = _interopRequireDefault(require("execa"));

var _listr = _interopRequireDefault(require("listr"));

var _colors = _interopRequireDefault(require("../lib/colors"));

const command = 'upgrade';
exports.command = command;
const desc = 'Upgrade all @redwoodjs packages via interactive CLI';
exports.desc = desc;

const builder = yargs => {
  yargs.option('dry-run', {
    alias: 'd',
    type: 'boolean',
    description: 'Check for outdated packages without upgrading'
  }).option('tag', {
    alias: 't',
    choices: ['canary', 'rc'],
    description: 'WARNING: Unstable releases. Force upgrades packages to most recent version for the given --tag.'
  }).strict();
};

exports.builder = builder;
const rwPackages = '@redwoodjs/core @redwoodjs/api @redwoodjs/web @redwoodjs/router @redwoodjs/auth'; // yarn upgrade-interactive does not allow --tags, so we resort to this mess
// @redwoodjs/auth may not be installed so we add check

const installTags = (tag, isAuth) => {
  const mainString = `yarn upgrade @redwoodjs/core@${tag} \
  && yarn workspace api upgrade @redwoodjs/api@${tag} \
  && yarn workspace web upgrade @redwoodjs/web@${tag} @redwoodjs/router@${tag}`;
  const authString = ` @redwoodjs/auth@${tag}`;

  if (isAuth) {
    return mainString + authString;
  } else {
    return mainString;
  }
};

const checkInstalled = () => {
  return [{
    // yarn upgrade will install listed packages even if not already installed
    // this is a workaround to check for Auth install and then add to options if true
    // TODO: this will not support cases where api/ or web/ do not exist;
    // need to build a list of installed and use reference object to map commands
    title: '...',
    task: async (ctx, task) => {
      try {
        const {
          stdout
        } = await _execa.default.command('yarn list --depth 0 --pattern @redwoodjs/auth');

        if ((0, _includes.default)(stdout).call(stdout, 'redwoodjs/auth')) {
          ctx.auth = true;
          task.title = 'Found @redwoodjs/auth';
        } else {
          task.title = 'Done';
        }
      } catch (e) {
        task.skip('"yarn list ..." caused an Error');
        console.log(_colors.default.error(e.message));
      }
    }
  }];
}; // yargs allows passing the 'dry-run' alias 'd' here,
// which we need to use because babel fails on 'dry-run'


const runUpgrade = ({
  d,
  tag
}) => {
  return [{
    title: '...',
    task: (ctx, task) => {
      if (d) {
        task.title = tag ? 'The --dry-run option is not supported for --tags' : 'Checking available upgrades for @redwoodjs packages'; // 'yarn outdated --scope @redwoodjs' will include netlify plugin
        // so we have to use hardcoded list,
        // which will NOT display info for uninstalled packages

        if (!tag) {
          _execa.default.command(`yarn outdated ${rwPackages}`, {
            stdio: 'inherit'
          });
        } else {
          throw new Error();
        } // using @tag with workspaces limits us to use 'upgrade' with full list

      } else if (tag) {
        task.title = `Force upgrading @redwoodjs packages to latest ${tag} release`;

        _execa.default.command(installTags(tag, ctx.auth), {
          stdio: 'inherit',
          shell: true
        });
      } else {
        task.title = 'Running @redwoodjs package interactive upgrade CLI';
        (0, _execa.default)('yarn upgrade-interactive', ['--scope @redwoodjs', '--latest'], {
          stdio: 'inherit',
          shell: true
        });
      }
    }
  }];
};

const handler = async ({
  d,
  tag
}) => {
  // structuring as nested tasks to avoid bug with task.title causing duplicates
  const tasks = new _listr.default([{
    title: 'Checking installed packages',
    task: () => new _listr.default(checkInstalled())
  }, {
    title: 'Running upgrade command',
    task: () => new _listr.default(runUpgrade({
      d,
      tag
    }))
  }], {
    collapse: false
  });

  try {
    await tasks.run();
  } catch (e) {
    console.log(_colors.default.error(e.message));
  }
};

exports.handler = handler;
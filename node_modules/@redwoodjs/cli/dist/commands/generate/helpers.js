"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js/object/define-property");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.intForeignKeysForModel = exports.relationsForModel = exports.createYargsForComponentGeneration = exports.pathName = exports.templateForComponentFile = void 0;

var _filter = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/instance/filter"));

var _map = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/instance/map"));

var _path = _interopRequireDefault(require("path"));

var _camelcase = _interopRequireDefault(require("camelcase"));

var _pluralize = _interopRequireDefault(require("pluralize"));

var _listr = _interopRequireDefault(require("listr"));

var _pascalcase = _interopRequireDefault(require("pascalcase"));

var _paramCase = require("param-case");

var _lib = require("../../lib");

var _colors = _interopRequireDefault(require("../../lib/colors"));

/**
 * Reduces boilerplate for generating an output path and content to write to disk
 * for a component.
 */
// TODO: Make this read all the files in a template directory instead of
// manually passing in each file.
const templateForComponentFile = ({
  name,
  suffix = '',
  extension = '.js',
  webPathSection,
  apiPathSection,
  generator,
  templatePath,
  templateVars,
  componentName,
  outputPath
}) => {
  const basePath = webPathSection ? (0, _lib.getPaths)().web[webPathSection] : (0, _lib.getPaths)().api[apiPathSection];
  const outputComponentName = componentName || (0, _pascalcase.default)((0, _paramCase.paramCase)(name)) + suffix;

  const componentOutputPath = outputPath || _path.default.join(basePath, outputComponentName, outputComponentName + extension);

  const content = (0, _lib.generateTemplate)(_path.default.join(generator, 'templates', templatePath), {
    name,
    outputPath: `./${_path.default.relative((0, _lib.getPaths)().base, componentOutputPath)}`,
    ...templateVars
  });
  return [componentOutputPath, content];
};
/**
 * Creates a route path, either returning the existing path if passed, otherwise
 * creates one based on the name
 */


exports.templateForComponentFile = templateForComponentFile;

const pathName = (path, name) => {
  return path !== null && path !== void 0 ? path : `/${(0, _paramCase.paramCase)(name)}`;
};
/**
 * Reduces boilerplate for creating a yargs handler that writes a component to a
 * location.
 */
// TODO: Make this work for all files, not just components.


exports.pathName = pathName;

const createYargsForComponentGeneration = ({
  componentName,
  filesFn
}) => {
  return {
    command: `${componentName} <name>`,
    desc: `Generate a ${componentName} component.`,
    builder: {
      force: {
        type: 'boolean',
        default: false
      }
    },
    handler: async ({
      force,
      ...rest
    }) => {
      const tasks = new _listr.default([{
        title: `Generating ${componentName} files...`,
        task: async () => {
          const f = await filesFn(rest);
          return (0, _lib.writeFilesTask)(f, {
            overwriteExisting: force
          });
        }
      }], {
        collapse: false,
        exitOnError: true
      });

      try {
        await tasks.run();
      } catch (e) {
        console.log(_colors.default.error(e.message));
      }
    }
  };
}; // Returns all relations to other models


exports.createYargsForComponentGeneration = createYargsForComponentGeneration;

const relationsForModel = model => {
  var _context, _context2;

  return (0, _map.default)(_context = (0, _filter.default)(_context2 = model.fields).call(_context2, f => f.relationName)).call(_context, field => {
    const relationName = (0, _camelcase.default)(field.type);
    return field.isList ? (0, _pluralize.default)(relationName) : relationName;
  });
}; // Returns only relations that are of datatype Int


exports.relationsForModel = relationsForModel;

const intForeignKeysForModel = model => {
  var _context3, _context4;

  return (0, _map.default)(_context3 = (0, _filter.default)(_context4 = model.fields).call(_context4, f => f.name.match(/Id$/) && f.type === 'Int')).call(_context3, f => f.name);
};

exports.intForeignKeysForModel = intForeignKeysForModel;
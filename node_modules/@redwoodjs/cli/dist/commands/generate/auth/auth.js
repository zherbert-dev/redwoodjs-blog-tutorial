"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js/object/define-property");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.handler = exports.builder = exports.desc = exports.command = exports.graphFunctionDoesExist = exports.webIndexDoesExist = exports.apiSrcDoesExist = exports.isProviderSupported = exports.addApiConfig = exports.addConfigToIndex = exports.files = void 0;

var _filter = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/instance/filter"));

var _promise = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/promise"));

var _interopRequireWildcard2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/interopRequireWildcard"));

var _indexOf = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/instance/index-of"));

var _map = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/instance/map"));

var _fs = _interopRequireDefault(require("fs"));

var _path = _interopRequireDefault(require("path"));

var _execa = _interopRequireDefault(require("execa"));

var _listr = _interopRequireDefault(require("listr"));

var _lib = require("../../../lib");

var _colors = _interopRequireDefault(require("../../../lib/colors"));

var _context;

const API_GRAPHQL_PATH = _path.default.join((0, _lib.getPaths)().api.functions, 'graphql.js');

const API_SRC_PATH = _path.default.join((0, _lib.getPaths)().api.src);

const TEMPLATE_PATH = _path.default.resolve(__dirname, 'templates', 'auth.js.template');

const TEMPLATE = _fs.default.readFileSync(TEMPLATE_PATH).toString();

const OUTPUT_PATH = _path.default.join((0, _lib.getPaths)().api.lib, 'auth.js');

const WEB_SRC_INDEX_PATH = _path.default.join((0, _lib.getPaths)().web.src, 'index.js');

const SUPPORTED_PROVIDERS = (0, _map.default)(_context = _fs.default.readdirSync(_path.default.resolve(__dirname, 'providers'))).call(_context, file => _path.default.basename(file, '.js')); // returns the content of index.js with import statements added

const addWebImports = (content, imports) => {
  const importStatements = (0, _map.default)(imports).call(imports, imp => {
    return `import ${imp.import} from '${imp.from}'`;
  });
  return `import { AuthProvider } from '@redwoodjs/auth'\n` + importStatements.join('\n') + '\n' + content;
}; // returns the content of index.js with init lines added


const addWebInit = (content, init) => {
  return content.replace(/ReactDOM.render/, `${init}\n\nReactDOM.render`);
}; // returns the content of index.js with <AuthProvider> added


const addWebRender = (content, authProvider) => {
  var _context2;

  const [_, indent, redwoodProvider] = content.match(/(\s+)(<RedwoodProvider>.*<\/RedwoodProvider>)/s);
  const redwoodProviderLines = (0, _map.default)(_context2 = redwoodProvider.split('\n')).call(_context2, line => {
    return '  ' + line;
  });
  const renderContent = indent + `<AuthProvider client={${authProvider.client}} type="${authProvider.type}">` + indent + redwoodProviderLines.join('\n') + indent + `</AuthProvider>`;
  return content.replace(/\s+<RedwoodProvider>.*<\/RedwoodProvider>/s, renderContent);
}; // the files to create to support auth


const files = () => {
  return {
    [OUTPUT_PATH]: TEMPLATE
  };
}; // actually inserts the required config lines into index.js


exports.files = files;

const addConfigToIndex = config => {
  let content = _fs.default.readFileSync(WEB_SRC_INDEX_PATH).toString();

  content = addWebImports(content, config.imports);
  content = addWebInit(content, config.init);
  content = addWebRender(content, config.authProvider);

  _fs.default.writeFileSync(WEB_SRC_INDEX_PATH, content);
};

exports.addConfigToIndex = addConfigToIndex;

const addApiConfig = () => {
  let content = _fs.default.readFileSync(API_GRAPHQL_PATH).toString(); // add import statement


  content = content.replace(/^(.*importAll.*)$/m, `$1\n\nimport { getCurrentUser } from 'src/lib/auth.js'`); // add object to handler

  content = content.replace(/^(\s*)(schema: makeMergedSchema)(.*)$/m, `$1getCurrentUser,\n$1$2$3`);

  _fs.default.writeFileSync(API_GRAPHQL_PATH, content);
};

exports.addApiConfig = addApiConfig;

const isProviderSupported = provider => {
  return (0, _indexOf.default)(SUPPORTED_PROVIDERS).call(SUPPORTED_PROVIDERS, provider) !== -1;
};

exports.isProviderSupported = isProviderSupported;

const apiSrcDoesExist = () => {
  return _fs.default.existsSync(API_SRC_PATH);
};

exports.apiSrcDoesExist = apiSrcDoesExist;

const webIndexDoesExist = () => {
  return _fs.default.existsSync(WEB_SRC_INDEX_PATH);
};

exports.webIndexDoesExist = webIndexDoesExist;

const graphFunctionDoesExist = () => {
  return _fs.default.existsSync(API_GRAPHQL_PATH);
};

exports.graphFunctionDoesExist = graphFunctionDoesExist;
const command = 'auth <provider>';
exports.command = command;
const desc = 'Generates auth configuration.';
exports.desc = desc;
const builder = {
  force: {
    type: 'boolean',
    default: false
  }
};
exports.builder = builder;

const handler = async ({
  provider,
  force
}) => {
  var _context3;

  const providerData = await _promise.default.resolve(`./providers/${provider}`).then(s => (0, _interopRequireWildcard2.default)(require(s)));
  const tasks = new _listr.default((0, _filter.default)(_context3 = [{
    title: 'Adding required packages...',
    task: async () => {
      if (!isProviderSupported(provider)) {
        throw new Error(`Unknown auth provider '${provider}'`);
      }

      await (0, _execa.default)('yarn', ['workspace', 'web', 'add', ...providerData.packages, '@redwoodjs/auth']);
    }
  }, {
    title: 'Installing packages...',
    task: async () => {
      await (0, _execa.default)('yarn', ['install']);
    }
  }, {
    title: 'Generating auth lib...',
    task: (_ctx, task) => {
      if (apiSrcDoesExist()) {
        return (0, _lib.writeFilesTask)(files(), {
          overwriteExisting: force
        });
      } else {
        task.skip('api/src not found, skipping');
      }
    }
  }, {
    title: 'Adding auth config to web...',
    task: (_ctx, task) => {
      if (webIndexDoesExist()) {
        addConfigToIndex(providerData.config);
      } else {
        task.skip('web/src/index.js not found, skipping');
      }
    }
  }, {
    title: 'Adding auth config to GraphQL API...',
    task: (_ctx, task) => {
      if (graphFunctionDoesExist()) {
        addApiConfig();
      } else {
        task.skip('GraphQL function not found, skipping');
      }
    }
  }, {
    title: 'One more thing...',
    task: (_ctx, task) => {
      task.title = `One more thing...\n\n   ${providerData.notes.join('\n   ')}\n`;
    }
  }]).call(_context3, Boolean), {
    collapse: false
  });

  try {
    await tasks.run();
  } catch (e) {
    console.log(_colors.default.error(e.message));
  }
};

exports.handler = handler;
"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js/object/define-property");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.handler = exports.builder = exports.desc = exports.command = void 0;

var _fs = _interopRequireDefault(require("fs"));

var _path = _interopRequireDefault(require("path"));

var _lib = require("../../lib");

const command = 'generate';
exports.command = command;
const desc = 'Generate the Prisma client.';
exports.desc = desc;
const builder = {
  verbose: {
    type: 'boolean',
    default: true,
    alias: ['v']
  },
  force: {
    type: 'boolean',
    default: true,
    alias: ['f']
  }
};
exports.builder = builder;

const handler = async ({
  verbose = true,
  force = false
}) => {
  const schemaExists = _fs.default.existsSync((0, _lib.getPaths)().api.dbSchema); // Do not generate the Prisma client if it exists.


  if (!force) {
    // The Prisma client throws if it is not generated.
    try {
      // Import the client from the redwood apps node_modules path.
      const {
        PrismaClient
      } = require(_path.default.join((0, _lib.getPaths)().base, 'node_modules/.prisma/client'));

      if (schemaExists) {
        // eslint-disable-next-line
        new PrismaClient();
      }

      return undefined;
    } catch (e) {// Swallow your pain.
    }
  }

  return await (0, _lib.runCommandTask)([{
    title: schemaExists ? 'Generating the Prisma client...' : 'Skipping Prisma Client: no schema.prisma found',
    cmd: schemaExists ? 'yarn prisma generate' : 'echo "no schema.prisma file found"'
  }], {
    verbose
  });
};

exports.handler = handler;
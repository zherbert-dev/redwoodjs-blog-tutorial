"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js/object/define-property");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.handler = exports.builder = exports.desc = exports.command = void 0;

var _includes = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/instance/includes"));

var _keys = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/object/keys"));

var _map = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/instance/map"));

var _filter = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/instance/filter"));

var _fs = _interopRequireDefault(require("fs"));

var _path = _interopRequireDefault(require("path"));

var _concurrently = _interopRequireDefault(require("concurrently"));

var _lib = require("../lib");

var _colors = _interopRequireDefault(require("../lib/colors"));

const command = 'dev [app..]';
exports.command = command;
const desc = 'Run development servers for db, api, and web.';
exports.desc = desc;
const builder = {
  app: {
    choices: ['db', 'api', 'web'],
    default: ['db', 'api', 'web']
  }
};
exports.builder = builder;

const handler = async ({
  app = ['db', 'api', 'web']
}) => {
  var _context, _context2;

  // We use BASE_DIR when we need to effectively set the working dir
  const BASE_DIR = (0, _lib.getPaths)().base; // For validation, e.g. dirExists?, we use these
  // note: getPaths().web|api.base returns undefined on Windows

  const API_DIR_SRC = (0, _lib.getPaths)().api.src;
  const WEB_DIR_SRC = (0, _lib.getPaths)().web.src;
  const PRISMA_SCHEMA = (0, _lib.getPaths)().api.dbSchema;
  const jobs = {
    api: {
      name: 'api',
      command: `cd "${_path.default.join(BASE_DIR, 'api')}" && yarn dev-server`,
      prefixColor: 'cyan',
      runWhen: () => _fs.default.existsSync(API_DIR_SRC)
    },
    db: {
      name: ' db',
      // prefixed with ` ` to match output indentation.
      command: `cd "${_path.default.join(BASE_DIR, 'api')}" && yarn prisma generate --watch`,
      prefixColor: 'magenta',
      runWhen: () => _fs.default.existsSync(PRISMA_SCHEMA)
    },
    web: {
      name: 'web',
      command: `cd "${_path.default.join(BASE_DIR, 'web')}" && yarn webpack-dev-server --config ../node_modules/@redwoodjs/core/config/webpack.development.js`,
      prefixColor: 'blue',
      runWhen: () => _fs.default.existsSync(WEB_DIR_SRC)
    }
  };
  (0, _concurrently.default)((0, _filter.default)(_context = (0, _map.default)(_context2 = (0, _keys.default)(jobs)).call(_context2, n => (0, _includes.default)(app).call(app, n) && jobs[n])).call(_context, job => job && job.runWhen()), {
    restartTries: 3,
    prefix: '{time} {name} |',
    timestampFormat: 'HH:mm:ss'
  }).catch(e => {
    console.log(_colors.default.error(e.message));
  });
};

exports.handler = handler;
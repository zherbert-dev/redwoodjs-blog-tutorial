#!/usr/bin/env node
"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js/object/define-property");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.copyFiles = exports.fixProjectBinaries = exports.resolveFrameworkPath = void 0;

var _keys = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/object/keys"));

var _map = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/instance/map"));

var _forEach = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/instance/for-each"));

var _path = _interopRequireDefault(require("path"));

var _fs = _interopRequireDefault(require("fs"));

var _yargs = _interopRequireDefault(require("yargs"));

var _internal = require("@redwoodjs/internal");

var _execa = _interopRequireDefault(require("execa"));

var _chokidar = _interopRequireDefault(require("chokidar"));

var _lodash = _interopRequireDefault(require("lodash"));

const RW_BINS = {
  redwood: 'cli/dist/index.js',
  rw: 'cli/dist/index.js',
  'redwood-tools': 'cli/dist/redwood-tools.js',
  rwt: 'cli/dist/redwood-tools.js',
  'dev-server': 'dev-server/dist/main.js'
};

const resolveFrameworkPath = RW_PATH => {
  if (!_fs.default.existsSync(RW_PATH)) {
    console.error(`Error: '${RW_PATH}' does not exist`);
    process.exit(1);
  }

  return _path.default.resolve(process.cwd(), RW_PATH);
};

exports.resolveFrameworkPath = resolveFrameworkPath;

const fixProjectBinaries = PROJECT_PATH => {
  var _context, _context2;

  (0, _forEach.default)(_context = (0, _map.default)(_context2 = (0, _keys.default)(RW_BINS)).call(_context2, name => {
    const from = _path.default.join(PROJECT_PATH, 'node_modules/.bin/', name);

    const to = _path.default.join(PROJECT_PATH, 'node_modules/@redwoodjs', RW_BINS[name]);

    console.log(`symlink '${from}' -> '${to}'`);
    return [from, to];
  })).call(_context, ([from, to]) => {
    try {
      _fs.default.unlinkSync(from);
    } catch (e) {
      console.warn(`Warning: Could not unlink ${from}`);
    }

    try {
      _fs.default.symlinkSync(to, from);
    } catch (e) {
      console.warn(`Warning: Could not symlink ${from} -> ${to}`);
      console.log(e);
    }

    try {
      _fs.default.chmodSync(from, '755');
    } catch (e) {
      console.warn(`Warning: Could not chmod ${from}`);
      console.log(e);
    }

    try {
      _fs.default.chmodSync(from, '755');
    } catch (e) {
      console.error(`Warning: Could not chmod ${from}`);
      console.error(e);
    }
  });
};

exports.fixProjectBinaries = fixProjectBinaries;

const copyFiles = async (src, dest) => {
  // TODO: Figure out if we need to only run based on certain events.
  await (0, _execa.default)('rsync', ['-rtvu --delete', `'${src}'`, `'${dest}'`], {
    shell: true,
    stdio: 'inherit',
    cleanup: true
  }); // when rsync is run modify the permission to make binaries executable.

  fixProjectBinaries((0, _internal.getPaths)().base);
}; // eslint-disable-next-line no-unused-expressions


exports.copyFiles = copyFiles;
_yargs.default.command(['copy [RW_PATH]', 'cp'], 'Copy the Redwood Framework path to this project', {}, ({
  RW_PATH = process.env.RW_PATH
}) => {
  RW_PATH = resolveFrameworkPath(RW_PATH);
  console.log('Redwood Framework Path: ', RW_PATH);
  const src = `${RW_PATH}/packages/`;
  const dest = `${(0, _internal.getPaths)().base}/node_modules/@redwoodjs/`; // eslint-disable-line

  copyFiles(src, dest);
}).command(['copy:watch [RW_PATH]', 'cpw'], 'Watch the Redwood Framework path for changes and copy them over to this project', {}, ({
  RW_PATH = process.env.RW_PATH
}) => {
  RW_PATH = resolveFrameworkPath(RW_PATH);
  console.log('Redwood Framework Path: ', RW_PATH);
  const src = `${RW_PATH}/packages/`;
  const dest = `${(0, _internal.getPaths)().base}/node_modules/@redwoodjs/`;

  _chokidar.default.watch(src, {
    persistent: true,
    recursive: true
  }).on('all', _lodash.default.debounce(event => {
    // TODO: Figure out if we need to only run based on certain events.
    console.log('Trigger event: ', event);
    copyFiles(src, dest);
  }, 500));
}).command(['install [packageName]', 'i'], 'Install a package from your local NPM registry', () => {}, ({
  packageName
}) => {
  // This command upgrades a Redwood package from the local NPM registry. You
  // run the local registry from `./tasks/run-local-npm`.
  // See `CONTRIBUTING.md` for more information.
  const pkgPath = _path.default.join((0, _internal.getPaths)().base, 'node_modules', packageName);

  console.log(`Deleting ${pkgPath}`);

  try {
    _fs.default.rmdirSync(pkgPath, {
      recursive: true
    });
  } catch (e) {
    console.error(`Error: Could not delete ${pkgPath}`);
    process.exit(1);
  }

  (0, _execa.default)('yarn', ['upgrade', `${packageName}@dev`, '--no-lockfile', '--registry http://localhost:4873/', '--check-files'], {
    shell: true,
    cwd: (0, _internal.getPaths)().base,
    stdio: 'inherit',
    extendEnv: true,
    cleanup: true
  });
}).command(['fix-bins', 'fix'], 'Fix Redwood symlinks and permissions', {}, () => {
  fixProjectBinaries((0, _internal.getPaths)().base);
}).demandCommand().strict().argv;
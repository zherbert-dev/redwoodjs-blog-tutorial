"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js/object/define-property");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.getConfig = exports.TargetEnum = void 0;

var _fs = _interopRequireDefault(require("fs"));

var _deepmerge = _interopRequireDefault(require("deepmerge"));

var _toml = _interopRequireDefault(require("toml"));

var _paths = require("./paths");

let TargetEnum;
exports.TargetEnum = TargetEnum;

(function (TargetEnum) {
  TargetEnum["NODE"] = "node";
  TargetEnum["BROWSER"] = "browser";
  TargetEnum["REACT_NATIVE"] = "react-native";
  TargetEnum["ELECTRON"] = "electron";
})(TargetEnum || (exports.TargetEnum = TargetEnum = {}));

const DEFAULT_CONFIG = {
  web: {
    host: 'localhost',
    port: 8910,
    path: './web',
    target: TargetEnum.BROWSER,
    apiProxyPath: '/.netlify/functions',
    apiProxyPort: 8911
  },
  api: {
    host: 'localhost',
    port: 8911,
    path: './api',
    target: TargetEnum.NODE
  },
  browser: {
    open: true
  }
};
/**
 * These configuration options are modified by the user via the Redwood
 * config file.
 */

const getConfig = (configPath = (0, _paths.getConfigPath)()) => {
  try {
    const rawConfig = _fs.default.readFileSync(configPath, 'utf8');

    return (0, _deepmerge.default)(DEFAULT_CONFIG, _toml.default.parse(rawConfig));
  } catch (e) {
    throw new Error(`Could not parse "${configPath}": ${e}`);
  }
};

exports.getConfig = getConfig;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9jb25maWcudHMiXSwibmFtZXMiOlsiVGFyZ2V0RW51bSIsIkRFRkFVTFRfQ09ORklHIiwid2ViIiwiaG9zdCIsInBvcnQiLCJwYXRoIiwidGFyZ2V0IiwiQlJPV1NFUiIsImFwaVByb3h5UGF0aCIsImFwaVByb3h5UG9ydCIsImFwaSIsIk5PREUiLCJicm93c2VyIiwib3BlbiIsImdldENvbmZpZyIsImNvbmZpZ1BhdGgiLCJyYXdDb25maWciLCJmcyIsInJlYWRGaWxlU3luYyIsInRvbWwiLCJwYXJzZSIsImUiLCJFcnJvciJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQUE7O0FBRUE7O0FBQ0E7O0FBRUE7O0lBRVlBLFU7OztXQUFBQSxVO0FBQUFBLEVBQUFBLFU7QUFBQUEsRUFBQUEsVTtBQUFBQSxFQUFBQSxVO0FBQUFBLEVBQUFBLFU7R0FBQUEsVSwwQkFBQUEsVTs7QUFrQ1osTUFBTUMsY0FBc0IsR0FBRztBQUM3QkMsRUFBQUEsR0FBRyxFQUFFO0FBQ0hDLElBQUFBLElBQUksRUFBRSxXQURIO0FBRUhDLElBQUFBLElBQUksRUFBRSxJQUZIO0FBR0hDLElBQUFBLElBQUksRUFBRSxPQUhIO0FBSUhDLElBQUFBLE1BQU0sRUFBRU4sVUFBVSxDQUFDTyxPQUpoQjtBQUtIQyxJQUFBQSxZQUFZLEVBQUUscUJBTFg7QUFNSEMsSUFBQUEsWUFBWSxFQUFFO0FBTlgsR0FEd0I7QUFTN0JDLEVBQUFBLEdBQUcsRUFBRTtBQUNIUCxJQUFBQSxJQUFJLEVBQUUsV0FESDtBQUVIQyxJQUFBQSxJQUFJLEVBQUUsSUFGSDtBQUdIQyxJQUFBQSxJQUFJLEVBQUUsT0FISDtBQUlIQyxJQUFBQSxNQUFNLEVBQUVOLFVBQVUsQ0FBQ1c7QUFKaEIsR0FUd0I7QUFlN0JDLEVBQUFBLE9BQU8sRUFBRTtBQUNQQyxJQUFBQSxJQUFJLEVBQUU7QUFEQztBQWZvQixDQUEvQjtBQW9CQTs7Ozs7QUFJTyxNQUFNQyxTQUFTLEdBQUcsQ0FBQ0MsVUFBVSxHQUFHLDJCQUFkLEtBQTBDO0FBQ2pFLE1BQUk7QUFDRixVQUFNQyxTQUFTLEdBQUdDLFlBQUdDLFlBQUgsQ0FBZ0JILFVBQWhCLEVBQTRCLE1BQTVCLENBQWxCOztBQUNBLFdBQU8sd0JBQU1kLGNBQU4sRUFBc0JrQixjQUFLQyxLQUFMLENBQVdKLFNBQVgsQ0FBdEIsQ0FBUDtBQUNELEdBSEQsQ0FHRSxPQUFPSyxDQUFQLEVBQVU7QUFDVixVQUFNLElBQUlDLEtBQUosQ0FBVyxvQkFBbUJQLFVBQVcsTUFBS00sQ0FBRSxFQUFoRCxDQUFOO0FBQ0Q7QUFDRixDQVBNIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGZzIGZyb20gJ2ZzJ1xuXG5pbXBvcnQgbWVyZ2UgZnJvbSAnZGVlcG1lcmdlJ1xuaW1wb3J0IHRvbWwgZnJvbSAndG9tbCdcblxuaW1wb3J0IHsgZ2V0Q29uZmlnUGF0aCB9IGZyb20gJy4vcGF0aHMnXG5cbmV4cG9ydCBlbnVtIFRhcmdldEVudW0ge1xuICBOT0RFID0gJ25vZGUnLFxuICBCUk9XU0VSID0gJ2Jyb3dzZXInLFxuICBSRUFDVF9OQVRJVkUgPSAncmVhY3QtbmF0aXZlJyxcbiAgRUxFQ1RST04gPSAnZWxlY3Ryb24nLFxufVxuXG5leHBvcnQgaW50ZXJmYWNlIE5vZGVUYXJnZXRDb25maWcge1xuICBuYW1lPzogc3RyaW5nXG4gIGhvc3Q6IHN0cmluZ1xuICBwb3J0OiBudW1iZXJcbiAgcGF0aDogc3RyaW5nXG4gIHRhcmdldDogVGFyZ2V0RW51bS5OT0RFXG59XG5cbmludGVyZmFjZSBCcm93c2VyVGFyZ2V0Q29uZmlnIHtcbiAgbmFtZT86IHN0cmluZ1xuICBob3N0OiBzdHJpbmdcbiAgcG9ydDogbnVtYmVyXG4gIHBhdGg6IHN0cmluZ1xuICB0YXJnZXQ6IFRhcmdldEVudW0uQlJPV1NFUlxuICAvLyBUT0RPOiBhcGlQcm94eUhvc3Q6IHN0cmluZ1xuICBhcGlQcm94eVBvcnQ6IG51bWJlclxuICBhcGlQcm94eVBhdGg6IHN0cmluZ1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIENvbmZpZyB7XG4gIHdlYjogQnJvd3NlclRhcmdldENvbmZpZ1xuICBhcGk6IE5vZGVUYXJnZXRDb25maWdcbiAgYnJvd3Nlcjoge1xuICAgIG9wZW46IGJvb2xlYW4gfCBzdHJpbmdcbiAgfVxufVxuXG5jb25zdCBERUZBVUxUX0NPTkZJRzogQ29uZmlnID0ge1xuICB3ZWI6IHtcbiAgICBob3N0OiAnbG9jYWxob3N0JyxcbiAgICBwb3J0OiA4OTEwLFxuICAgIHBhdGg6ICcuL3dlYicsXG4gICAgdGFyZ2V0OiBUYXJnZXRFbnVtLkJST1dTRVIsXG4gICAgYXBpUHJveHlQYXRoOiAnLy5uZXRsaWZ5L2Z1bmN0aW9ucycsXG4gICAgYXBpUHJveHlQb3J0OiA4OTExLFxuICB9LFxuICBhcGk6IHtcbiAgICBob3N0OiAnbG9jYWxob3N0JyxcbiAgICBwb3J0OiA4OTExLFxuICAgIHBhdGg6ICcuL2FwaScsXG4gICAgdGFyZ2V0OiBUYXJnZXRFbnVtLk5PREUsXG4gIH0sXG4gIGJyb3dzZXI6IHtcbiAgICBvcGVuOiB0cnVlLFxuICB9LFxufVxuXG4vKipcbiAqIFRoZXNlIGNvbmZpZ3VyYXRpb24gb3B0aW9ucyBhcmUgbW9kaWZpZWQgYnkgdGhlIHVzZXIgdmlhIHRoZSBSZWR3b29kXG4gKiBjb25maWcgZmlsZS5cbiAqL1xuZXhwb3J0IGNvbnN0IGdldENvbmZpZyA9IChjb25maWdQYXRoID0gZ2V0Q29uZmlnUGF0aCgpKTogQ29uZmlnID0+IHtcbiAgdHJ5IHtcbiAgICBjb25zdCByYXdDb25maWcgPSBmcy5yZWFkRmlsZVN5bmMoY29uZmlnUGF0aCwgJ3V0ZjgnKVxuICAgIHJldHVybiBtZXJnZShERUZBVUxUX0NPTkZJRywgdG9tbC5wYXJzZShyYXdDb25maWcpKVxuICB9IGNhdGNoIChlKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBDb3VsZCBub3QgcGFyc2UgXCIke2NvbmZpZ1BhdGh9XCI6ICR7ZX1gKVxuICB9XG59XG4iXX0=
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getErrorMessageWithLink = exports.PrismaClientInitializationError = exports.PrismaClientRustPanicError = exports.PrismaClientUnknownRequestError = exports.PrismaClientKnownRequestError = exports.getMessage = exports.PrismaQueryEngineError = void 0;
const log_1 = require("./log");
const debug_1 = require("@prisma/debug");
const util_1 = require("./util");
const strip_ansi_1 = __importDefault(require("strip-ansi"));
// import chalk from 'chalk'
class PrismaQueryEngineError extends Error {
    constructor(message, code) {
        super(message);
        this.code = code;
    }
}
exports.PrismaQueryEngineError = PrismaQueryEngineError;
function getMessage(log) {
    if (typeof log === 'string') {
        return log;
    }
    else if (log_1.isRustError(log)) {
        return log.message;
    }
    else if (log.fields && log.fields.message) {
        if (log.fields.reason) {
            return `${log.fields.message}: ${log.fields.reason}`;
        }
        return log.fields.message;
    }
    else {
        return JSON.stringify(log);
    }
}
exports.getMessage = getMessage;
class PrismaClientKnownRequestError extends Error {
    constructor(message, code, meta) {
        super(message);
        this.code = code;
        this.meta = meta;
    }
}
exports.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
class PrismaClientUnknownRequestError extends Error {
    constructor(message) {
        super(message);
    }
}
exports.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError;
class PrismaClientRustPanicError extends Error {
    constructor(message) {
        super(message);
    }
}
exports.PrismaClientRustPanicError = PrismaClientRustPanicError;
class PrismaClientInitializationError extends Error {
    constructor(message) {
        super(message);
    }
}
exports.PrismaClientInitializationError = PrismaClientInitializationError;
function getErrorMessageWithLink({ version, platform, title, description, }) {
    const logs = debug_1.getLogs();
    const moreInfo = description ? `# Description\n${description}` : '';
    const body = strip_ansi_1.default(`Hi Prisma Team! My Prisma Client just crashed. This is the report:
## Versions

| Name     | Version            |
|----------|--------------------|
| Node     | ${process.version.padEnd(19)}| 
| OS       | ${platform.padEnd(19)}|
| Prisma   | ${version.padEnd(19)}|

## Logs
\`\`\`
${logs}
\`\`\`
${moreInfo}`);
    const url = util_1.getGithubIssueUrl({ title, body });
    return `${title}

This is a non-recoverable error which probably happens when the Prisma Query Engine has a panic.

${util_1.link(url)}

If you want the Prisma team to look into it, please open the link above üôè
`;
}
exports.getErrorMessageWithLink = getErrorMessageWithLink;
//# sourceMappingURL=Engine.js.map
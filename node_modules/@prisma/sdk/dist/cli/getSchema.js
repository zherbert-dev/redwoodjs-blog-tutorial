"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getSchemaSync = exports.getSchemaDirSync = exports.getSchemaPathSync = exports.getSchema = exports.getSchemaDir = exports.getSchemaPath = void 0;
const util_1 = require("util");
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const execa_1 = __importDefault(require("execa"));
const exists = util_1.promisify(fs_1.default.exists);
const readFile = util_1.promisify(fs_1.default.readFile);
/**
 * Async
 */
function getSchemaPath(schemaPathFromArgs) {
    return __awaiter(this, void 0, void 0, function* () {
        if (schemaPathFromArgs) {
            // try the user custom path
            const customSchemaPath = yield getAbsoluteSchemaPath(path_1.default.resolve(schemaPathFromArgs));
            if (customSchemaPath) {
                return customSchemaPath;
            }
            else {
                throw new Error(`Provided --schema at ${schemaPathFromArgs} doesn't exist.`);
            }
        }
        // try the normal cwd
        const relativeSchemaPath = yield getRelativeSchemaPath(process.cwd());
        if (relativeSchemaPath) {
            return relativeSchemaPath;
        }
        // in case no schema can't be found there, try the npm-based INIT_CWD
        if (process.env.INIT_CWD) {
            return ((yield getRelativeSchemaPath(process.env.INIT_CWD)) ||
                (yield resolveYarnSchema()));
        }
        return null;
    });
}
exports.getSchemaPath = getSchemaPath;
function resolveYarnSchema() {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
        if ((_a = process.env.npm_config_user_agent) === null || _a === void 0 ? void 0 : _a.includes('yarn')) {
            try {
                const { stdout: version } = yield execa_1.default.command('yarn --version');
                if (version.startsWith('2')) {
                    return null;
                }
                const { stdout } = yield execa_1.default.command('yarn workspaces info --json');
                const json = getJson(stdout);
                for (const workspace of Object.values(json)) {
                    const workspacePath = path_1.default.join(process.env.INIT_CWD, workspace.location);
                    const workspaceSchemaPath = yield getRelativeSchemaPath(workspacePath);
                    if (workspaceSchemaPath) {
                        return workspaceSchemaPath;
                    }
                }
            }
            catch (e) {
                return null;
            }
        }
        return null;
    });
}
function resolveYarnSchemaSync() {
    var _a;
    if ((_a = process.env.npm_config_user_agent) === null || _a === void 0 ? void 0 : _a.includes('yarn')) {
        try {
            const { stdout: version } = execa_1.default.commandSync('yarn --version');
            if (version.startsWith('2')) {
                return null;
            }
            const { stdout } = execa_1.default.commandSync('yarn workspaces info --json');
            const json = getJson(stdout);
            for (const workspace of Object.values(json)) {
                const workspacePath = path_1.default.join(process.env.INIT_CWD, workspace.location);
                const workspaceSchemaPath = getRelativeSchemaPathSync(workspacePath);
                if (workspaceSchemaPath) {
                    return workspaceSchemaPath;
                }
            }
        }
        catch (e) {
            return null;
        }
    }
    return null;
}
function getAbsoluteSchemaPath(schemaPath) {
    return __awaiter(this, void 0, void 0, function* () {
        if (yield exists(schemaPath)) {
            return schemaPath;
        }
        return null;
    });
}
function getRelativeSchemaPath(cwd) {
    return __awaiter(this, void 0, void 0, function* () {
        let schemaPath = path_1.default.join(cwd, 'schema.prisma');
        if (yield exists(schemaPath)) {
            return schemaPath;
        }
        schemaPath = path_1.default.join(cwd, `prisma/schema.prisma`);
        if (yield exists(schemaPath)) {
            return schemaPath;
        }
        return null;
    });
}
/**
 * Small helper that returns the directory which contains the `schema.prisma` file
 */
function getSchemaDir(schemaPathFromArgs) {
    return __awaiter(this, void 0, void 0, function* () {
        if (schemaPathFromArgs) {
            return path_1.default.resolve(path_1.default.dirname(schemaPathFromArgs));
        }
        const schemaPath = yield getSchemaPath(schemaPathFromArgs);
        if (schemaPath) {
            return path_1.default.dirname(schemaPath);
        }
        return null;
    });
}
exports.getSchemaDir = getSchemaDir;
function getSchema(schemaPathFromArgs) {
    return __awaiter(this, void 0, void 0, function* () {
        const schemaPath = yield getSchemaPath(schemaPathFromArgs);
        if (!schemaPath) {
            throw new Error(`Could not find ${schemaPathFromArgs || 'schema.prisma'}`);
        }
        return readFile(schemaPath, 'utf-8');
    });
}
exports.getSchema = getSchema;
/**
 * Sync
 */
function getSchemaPathSync(schemaPathFromArgs) {
    if (schemaPathFromArgs) {
        // try the user custom path
        const customSchemaPath = getAbsoluteSchemaPathSync(path_1.default.resolve(schemaPathFromArgs));
        if (customSchemaPath) {
            return customSchemaPath;
        }
        else {
            throw new Error(`Provided --schema at ${schemaPathFromArgs} doesn't exist.`);
        }
    }
    // first try intuitive schema path
    const relativeSchemaPath = getRelativeSchemaPathSync(process.cwd());
    if (relativeSchemaPath) {
        return relativeSchemaPath;
    }
    // in case the normal schema path doesn't exist, try the npm base dir
    if (process.env.INIT_CWD) {
        return (getRelativeSchemaPathSync(process.env.INIT_CWD) || resolveYarnSchemaSync());
    }
    return null;
}
exports.getSchemaPathSync = getSchemaPathSync;
function getAbsoluteSchemaPathSync(schemaPath) {
    if (fs_1.default.existsSync(schemaPath)) {
        return schemaPath;
    }
    return null;
}
function getRelativeSchemaPathSync(cwd) {
    let schemaPath = path_1.default.join(cwd, 'schema.prisma');
    if (fs_1.default.existsSync(schemaPath)) {
        return schemaPath;
    }
    schemaPath = path_1.default.join(cwd, `prisma/schema.prisma`);
    if (fs_1.default.existsSync(schemaPath)) {
        return schemaPath;
    }
    return null;
}
/**
 * Sync version of the small helper that returns the directory which contains the `schema.prisma` file
 */
function getSchemaDirSync(schemaPathFromArgs) {
    if (schemaPathFromArgs) {
        return path_1.default.resolve(path_1.default.dirname(schemaPathFromArgs));
    }
    const schemaPath = getSchemaPathSync(schemaPathFromArgs);
    if (schemaPath) {
        return path_1.default.dirname(schemaPath);
    }
    return null;
}
exports.getSchemaDirSync = getSchemaDirSync;
function getSchemaSync(schemaPathFromArgs) {
    const schemaPath = getSchemaPathSync(schemaPathFromArgs);
    if (!schemaPath) {
        throw new Error(`Could not find ${schemaPath || 'schema.prisma'}`);
    }
    return fs_1.default.readFileSync(schemaPath, 'utf-8');
}
exports.getSchemaSync = getSchemaSync;
function getJson(stdout) {
    const firstCurly = stdout.indexOf('{');
    const lastCurly = stdout.lastIndexOf('}');
    const sliced = stdout.slice(firstCurly, lastCurly + 1);
    return JSON.parse(sliced);
}
//# sourceMappingURL=getSchema.js.map
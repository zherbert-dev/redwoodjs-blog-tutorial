"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.resolveOutput = void 0;
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const util_1 = require("util");
const exists = util_1.promisify(fs_1.default.exists);
function resolveNodeModulesBase(cwd) {
    return __awaiter(this, void 0, void 0, function* () {
        if (yield exists(path_1.default.resolve(process.cwd(), 'prisma/schema.prisma'))) {
            return process.cwd();
        }
        if (path_1.default.relative(process.cwd(), cwd) === 'prisma' &&
            (yield exists(path_1.default.resolve(process.cwd(), 'package.json')))) {
            return process.cwd();
        }
        if (yield exists(path_1.default.resolve(cwd, 'node_modules'))) {
            return cwd;
        }
        if (yield exists(path_1.default.resolve(cwd, '../node_modules'))) {
            return path_1.default.join(cwd, '../');
        }
        if (yield exists(path_1.default.resolve(cwd, 'package.json'))) {
            return cwd;
        }
        if (yield exists(path_1.default.resolve(cwd, '../package.json'))) {
            return path_1.default.join(cwd, '../');
        }
        return cwd;
    });
}
function resolveOutput(options) {
    return __awaiter(this, void 0, void 0, function* () {
        const defaultOutput = stripRelativePath(options.defaultOutput);
        if (defaultOutput.startsWith('node_modules')) {
            const nodeModulesBase = yield resolveNodeModulesBase(options.baseDir);
            return path_1.default.resolve(nodeModulesBase, defaultOutput);
        }
        return path_1.default.resolve(options.baseDir, defaultOutput);
    });
}
exports.resolveOutput = resolveOutput;
function stripRelativePath(pathString) {
    if (pathString.startsWith('./')) {
        return pathString.slice(2);
    }
    return pathString;
}
//# sourceMappingURL=resolveOutput.js.map
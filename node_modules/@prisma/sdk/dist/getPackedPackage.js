"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPackedPackage = void 0;
const execa_1 = __importDefault(require("execa"));
const path_1 = __importDefault(require("path"));
const tempy_1 = __importDefault(require("tempy"));
const fs_1 = __importDefault(require("fs"));
const resolve_pkg_1 = __importDefault(require("resolve-pkg"));
const tar_1 = __importDefault(require("tar"));
const copy_1 = __importDefault(require("@apexearth/copy"));
const make_dir_1 = __importDefault(require("make-dir"));
const util_1 = require("util");
const rimraf_1 = __importDefault(require("rimraf"));
const read_pkg_up_1 = __importDefault(require("read-pkg-up"));
// why not directly use Sindre's 'del'? Because it's not ncc-able :/
const del = util_1.promisify(rimraf_1.default);
function getPackedPackage(name, target, packageDir) {
    return __awaiter(this, void 0, void 0, function* () {
        if (!target) {
            throw new Error(`Error in getPackage: Please provide a target`);
        }
        packageDir =
            packageDir ||
                resolve_pkg_1.default(name, { cwd: __dirname }) ||
                resolve_pkg_1.default(name, { cwd: target });
        if (!packageDir) {
            const pkg = yield read_pkg_up_1.default({
                cwd: target,
            });
            if (pkg && pkg.packageJson.name === name) {
                packageDir = path_1.default.dirname(pkg.path);
            }
        }
        if (!packageDir && fs_1.default.existsSync(path_1.default.join(process.cwd(), 'package.json'))) {
            packageDir = process.cwd();
        }
        if (!packageDir) {
            throw new Error(`Error in getPackage: Could not resolve package ${name} from ${__dirname}`);
        }
        const tmpDir = tempy_1.default.directory(); // thanks Sindre
        const archivePath = path_1.default.join(tmpDir, `package.tgz`);
        // pack into a .tgz in a tmp dir
        yield execa_1.default.command(`yarn pack -f ${archivePath}`, {
            shell: true,
            cwd: packageDir,
        });
        // extract and delete the archive
        yield tar_1.default.extract({
            cwd: tmpDir,
            file: archivePath,
        });
        yield del(archivePath);
        // make target dir
        yield make_dir_1.default(target);
        // copy stuff over
        yield copy_1.default({
            from: path_1.default.join(tmpDir, 'package'),
            to: target,
            recursive: true,
            parallelJobs: 20,
            overwrite: true,
        });
        // delete tmp dir
        yield del(tmpDir);
    });
}
exports.getPackedPackage = getPackedPackage;
//# sourceMappingURL=getPackedPackage.js.map
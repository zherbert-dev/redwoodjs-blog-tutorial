"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const getGenerators_1 = require("../../getGenerators");
const pick_1 = require("../../pick");
const omit_1 = require("../../omit");
jest.setTimeout(10000);
describe('getGenerators', () => {
    test('basic', () => __awaiter(void 0, void 0, void 0, function* () {
        const aliases = {
            'predefined-generator': {
                generatorPath: path_1.default.join(__dirname, 'generator'),
                outputPath: __dirname,
            },
        };
        const generators = yield getGenerators_1.getGenerators({
            schemaPath: path_1.default.join(__dirname, 'valid-minimal-schema.prisma'),
            providerAliases: aliases,
        });
        expect(generators.map((g) => g.manifest)).toMatchInlineSnapshot(`
      Array [
        Object {
          "defaultOutput": "default-output",
          "denylist": Array [
            "SomeForbiddenType",
          ],
          "prettyName": "This is a pretty pretty name",
          "requiresEngines": Array [
            "queryEngine",
            "migrationEngine",
          ],
          "requiresGenerators": Array [
            "prisma-client-js",
          ],
        },
      ]
    `);
        expect(pick_1.pick(generators[0].options, [
            'datamodel',
            'datasources',
            'otherGenerators',
        ])).toMatchInlineSnapshot(`
      Object {
        "datamodel": "generator gen {
        provider      = \\"predefined-generator\\"
        binaryTargets = [\\"darwin\\"]
      }

      model User {
        id   Int    @id
        name String
      }",
        "datasources": Array [],
        "otherGenerators": Array [],
      }
    `);
        expect(omit_1.omit(generators[0].options.generator, ['output']))
            .toMatchInlineSnapshot(`
      Object {
        "binaryTargets": Array [
          "darwin",
        ],
        "config": Object {},
        "name": "gen",
        "provider": "predefined-generator",
      }
    `);
    }));
    test('fail on platforms', () => __awaiter(void 0, void 0, void 0, function* () {
        const aliases = {
            'predefined-generator': {
                generatorPath: path_1.default.join(__dirname, 'generator'),
                outputPath: __dirname,
            },
        };
        yield expect(getGenerators_1.getGenerators({
            schemaPath: path_1.default.join(__dirname, 'invalid-platforms-schema.prisma'),
            providerAliases: aliases,
        })).rejects.toThrow('deprecated');
    }));
    test('fail on invalid binaryTarget', () => __awaiter(void 0, void 0, void 0, function* () {
        const aliases = {
            'predefined-generator': {
                generatorPath: path_1.default.join(__dirname, 'generator'),
                outputPath: __dirname,
            },
        };
        yield expect(getGenerators_1.getGenerators({
            schemaPath: path_1.default.join(__dirname, 'invalid-binary-target-schema.prisma'),
            providerAliases: aliases,
        })).rejects.toThrow('Unknown');
    }));
});
//# sourceMappingURL=getGenerators.test.js.map
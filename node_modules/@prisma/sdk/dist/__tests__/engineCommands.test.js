"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const engineCommands_1 = require("../engineCommands");
const strip_ansi_1 = __importDefault(require("strip-ansi"));
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
jest.setTimeout(10000);
describe('getDMMF', () => {
    test('simple model', () => __awaiter(void 0, void 0, void 0, function* () {
        const dmmf = yield engineCommands_1.getDMMF({
            datamodel: `model A {
    id Int @id
    name String
  }`,
        });
        expect(dmmf.datamodel).toMatchInlineSnapshot(`
      Object {
        "enums": Array [],
        "models": Array [
          Object {
            "dbName": null,
            "fields": Array [
              Object {
                "hasDefaultValue": false,
                "isGenerated": false,
                "isId": true,
                "isList": false,
                "isReadOnly": false,
                "isRequired": true,
                "isUnique": false,
                "isUpdatedAt": false,
                "kind": "scalar",
                "name": "id",
                "type": "Int",
              },
              Object {
                "hasDefaultValue": false,
                "isGenerated": false,
                "isId": false,
                "isList": false,
                "isReadOnly": false,
                "isRequired": true,
                "isUnique": false,
                "isUpdatedAt": false,
                "kind": "scalar",
                "name": "name",
                "type": "String",
              },
            ],
            "idFields": Array [],
            "isEmbedded": false,
            "isGenerated": false,
            "name": "A",
            "uniqueFields": Array [],
          },
        ],
      }
    `);
        expect(dmmf).toMatchSnapshot();
    }));
    test('big schema', () => __awaiter(void 0, void 0, void 0, function* () {
        const file = fs_1.default.readFileSync(path_1.default.join(__dirname, '../../fixtures/bigschema.prisma'), 'utf-8');
        const dmmf = yield engineCommands_1.getDMMF({ datamodel: file });
        const str = JSON.stringify(dmmf);
        expect(str.length).toMatchInlineSnapshot(`54656997`);
    }));
    test('with validation errors', () => __awaiter(void 0, void 0, void 0, function* () {
        const datamodel = `generator client {
      provider = "prisma-client-js"
    }
    
    datasource my_db {
      provider = "sqlite"
      url      = "file:dev.db"
    }
    
    model User {
      id           String     @id @default(cuid())
      id           String     @id @default(cuid())
      name         String
      email        String     @unique
      status       String     @default("")
      permissions  Permission @default()
      permissions  Permission @default("")
      posts        Post[]
      posts        Post[]
    }
    
    model Post {
      id        String   @id @default(cuid())
      name      String
      email     String   @unique
      createdAt DateTime @default(now())
      updatedAt DateTime @updatedAt
    }
    
    enum Permission {
      ADMIN
      USER
      OWNER
      COLLABORATOR
    }
    `;
        /* eslint-disable jest/no-try-expect */
        try {
            yield engineCommands_1.getDMMF({ datamodel });
        }
        catch (e) {
            expect(strip_ansi_1.default(e.message)).toMatchSnapshot();
        }
        /* eslint-enable jest/no-try-expect */
    }));
});
describe('getConfig', () => {
    test('empty config', () => __awaiter(void 0, void 0, void 0, function* () {
        const config = yield engineCommands_1.getConfig({
            datamodel: `model A {
      id Int @id
      name String
    }`,
        });
        expect(config).toMatchSnapshot();
    }));
    test('with generator and datasource', () => __awaiter(void 0, void 0, void 0, function* () {
        const config = yield engineCommands_1.getConfig({
            datamodel: `
    datasource db {
      url = "file:dev.db"
      provider = "sqlite"
    }

    generator gen {
      provider = "fancy-provider"
      binaryTargets = ["native"]
    }

    model A {
      id Int @id
      name String
    }`,
        });
        expect(config).toMatchSnapshot();
    }));
});
describe('format', () => {
    test('valid blog schema', () => __awaiter(void 0, void 0, void 0, function* () {
        const formatted = yield engineCommands_1.formatSchema({
            schemaPath: path_1.default.join(__dirname, 'fixtures/blog.prisma'),
        });
        expect(formatted).toMatchInlineSnapshot(`
      "datasource db {
        provider = \\"sqlite\\"
        url      = \\"file:dev.db\\"
      }

      generator client {
        provider      = \\"prisma-client-js\\"
        binaryTargets = [\\"native\\"]
      }

      model User {
        id    String  @default(cuid()) @id
        email String  @unique
        name  String?
        posts Post[]
        Like  Like[]
      }

      model Post {
        id        String   @default(cuid()) @id
        createdAt DateTime @default(now())
        updatedAt DateTime @updatedAt
        published Boolean
        title     String
        content   String?
        authorId  String?
        author    User?    @relation(fields: [authorId], references: [id])
        Like      Like[]
      }

      model Like {
        id     String @default(cuid()) @id
        userId String
        user   User   @relation(fields: [userId], references: [id])
        postId String
        post   Post   @relation(fields: [postId], references: [id])

        @@unique([userId, postId])
      }"
    `);
    }));
});
//# sourceMappingURL=engineCommands.test.js.map
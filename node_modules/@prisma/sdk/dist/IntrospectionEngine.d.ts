export interface IntrospectionEngineOptions {
    binaryPath?: string;
    debug?: boolean;
    cwd?: string;
}
export interface RPCPayload {
    id: number;
    jsonrpc: string;
    method: string;
    params: any;
}
export declare class IntrospectionPanic extends Error {
    request: any;
    rustStack: string;
    constructor(message: string, rustStack: string, request: any);
}
export declare class IntrospectionError extends Error {
    code: string;
    constructor(message: string, code: string);
}
export declare type IntrospectionWarnings = IntrospectionWarningsMissingUnique | IntrospectionWarningsEmptyFieldName | IntrospectionWarningsUnsupportedType | IntrospectionWarningsInvalidEnumName;
interface IntrospectionWarningsMissingUnique {
    code: 1;
    message: string;
    affected: {
        model: string;
    }[];
}
interface IntrospectionWarningsEmptyFieldName {
    code: 2;
    message: string;
    affected: {
        model: string;
        field: string;
    }[];
}
interface IntrospectionWarningsUnsupportedType {
    code: 3;
    message: string;
    affected: {
        model: string;
        field: string;
        tpe: string;
    }[];
}
interface IntrospectionWarningsInvalidEnumName {
    code: 4;
    message: string;
    affected: {
        enm: string;
        value: string;
    }[];
}
export declare type IntrospectionSchemaVersion = 'Prisma2' | 'Prisma1' | 'Prisma11' | 'NonPrisma';
export declare class IntrospectionEngine {
    private debug;
    private cwd;
    private child?;
    private listeners;
    private messages;
    private lastRequest?;
    private lastError?;
    private initPromise?;
    private lastUrl?;
    isRunning: boolean;
    constructor({ debug, cwd }?: IntrospectionEngineOptions);
    stop(): void;
    private rejectAll;
    private registerCallback;
    getDatabaseDescription(schema: string): Promise<string>;
    introspect(schema: string): Promise<{
        datamodel: string;
        warnings: IntrospectionWarnings[];
        version: IntrospectionSchemaVersion;
    }>;
    listDatabases(schema: string): Promise<string[]>;
    getDatabaseMetadata(schema: string): Promise<{
        size_in_bytes: number;
        table_count: number;
    }>;
    private handleResponse;
    private init;
    private internalInit;
    private runCommand;
    private persistError;
    private getRPCPayload;
}
export {};

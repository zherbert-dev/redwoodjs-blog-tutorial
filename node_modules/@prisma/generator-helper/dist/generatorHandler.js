"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.generatorHandler = void 0;
const byline_1 = __importDefault(require("./byline"));
function generatorHandler(handler) {
    byline_1.default(process.stdin).on('data', (line) => __awaiter(this, void 0, void 0, function* () {
        const json = JSON.parse(String(line));
        if (json.method === 'generate' && json.params) {
            try {
                const result = yield handler.onGenerate(json.params);
                respond({
                    jsonrpc: '2.0',
                    result: result,
                    id: json.id,
                });
            }
            catch (e) {
                respond({
                    jsonrpc: '2.0',
                    error: {
                        code: -32000,
                        message: e.stack || e.message,
                        data: null,
                    },
                    id: json.id,
                });
            }
        }
        if (json.method === 'getManifest') {
            if (handler.onManifest) {
                try {
                    const manifest = handler.onManifest();
                    respond({
                        jsonrpc: '2.0',
                        result: {
                            manifest,
                        },
                        id: json.id,
                    });
                }
                catch (e) {
                    respond({
                        jsonrpc: '2.0',
                        error: {
                            code: -32000,
                            message: e.stack || e.message,
                            data: null,
                        },
                        id: json.id,
                    });
                }
            }
            else {
                respond({
                    jsonrpc: '2.0',
                    result: {
                        manifest: null,
                    },
                    id: json.id,
                });
            }
        }
    }));
    process.stdin.resume();
}
exports.generatorHandler = generatorHandler;
function respond(response) {
    console.error(JSON.stringify(response));
}
//# sourceMappingURL=generatorHandler.js.map
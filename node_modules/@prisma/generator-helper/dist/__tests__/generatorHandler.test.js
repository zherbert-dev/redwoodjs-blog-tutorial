"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const GeneratorProcess_1 = require("../GeneratorProcess");
const path_1 = __importDefault(require("path"));
const stubOptions = {
    datamodel: '',
    datasources: [],
    dmmf: {
        datamodel: {
            enums: [],
            models: [],
        },
        mappings: [],
        schema: {
            enums: [],
            inputTypes: [],
            outputTypes: [],
        },
    },
    generator: {
        config: {},
        name: 'some-generator',
        output: null,
        binaryTargets: [],
        provider: '',
    },
    otherGenerators: [],
    schemaPath: '',
    version: 'latest',
};
describe('generatorHandler', () => {
    // test('not executable', async () => {
    //   expect(() => {
    //     const generator = new GeneratorProcess(
    //       path.join(__dirname, 'not-executable'),
    //     )
    //   }).toThrow('is not executable')
    // })
    test('parsing error', () => __awaiter(void 0, void 0, void 0, function* () {
        const generator = new GeneratorProcess_1.GeneratorProcess(path_1.default.join(__dirname, 'invalid-executable'));
        yield expect(generator.init()).rejects.toThrow(`Cannot find module 'ms-node/register'`);
    }));
    test('minimal-executable', () => __awaiter(void 0, void 0, void 0, function* () {
        const generator = new GeneratorProcess_1.GeneratorProcess(path_1.default.join(__dirname, 'minimal-executable'));
        yield generator.init();
        const manifest = yield generator.getManifest();
        expect(manifest).toMatchInlineSnapshot(`
      Object {
        "defaultOutput": "default-output",
        "denylists": Object {
          "models": Array [
            "SomeForbiddenModel",
          ],
        },
        "prettyName": "This is a pretty pretty name",
        "requiresEngines": Array [
          "introspection-engine",
          "query-engine",
        ],
        "requiresGenerators": Array [
          "prisma-client-js",
        ],
      }
    `);
        expect(() => generator.generate(stubOptions)).not.toThrow();
        generator.stop();
    }));
    test('failing-executable', () => __awaiter(void 0, void 0, void 0, function* () {
        const generator = new GeneratorProcess_1.GeneratorProcess(path_1.default.join(__dirname, 'failing-executable'));
        yield generator.init();
        yield expect(generator.getManifest()).rejects.toThrow();
        yield expect(generator.generate(stubOptions)).rejects.toThrow();
        generator.stop();
    }));
    test('non existent executable', () => __awaiter(void 0, void 0, void 0, function* () {
        const generator = new GeneratorProcess_1.GeneratorProcess(path_1.default.join(__dirname, 'random path that doesnt exist'));
        expect(() => generator.init()).rejects.toThrow();
    }));
});
//# sourceMappingURL=generatorHandler.test.js.map